{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "artifactsBaseUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/elastic/azure-marketplace/master/src",
      "metadata": {
        "artifactsBaseUrl": "Base URL of the Elastic template gallery package"
      }
    },
    "esVersion": {
      "type": "string",
      "defaultValue": "2.4.1",
      "allowedValues": [
        "2.0.2",
        "2.1.2",
        "2.2.0",
        "2.3.2",
        "2.3.3",
        "2.3.4",
        "2.3.5",
        "2.4.0",
        "2.4.1"
      ],
      "metadata": {
        "description": "Elasticsearch version to install"
      }
    },
    "esClusterName": {
      "type": "string",
      "defaultValue": "elasticsearch",
      "metadata": {
        "description": "The name of the Elasticsearch cluster"
      }
    },
    "cloudAzureStorageAccountName": {
      "type": "string",
      "defaultValue": "essnapshot",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "The name of the storage account to use for snapshots with Azure Cloud plugin. Must be between 3 and 24 alphanumeric lowercase characters."
      }
    },
    "cloudAzureStorageAccountExistingResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the resource group in which an existing storage account resides to use for snapshots with Azure Cloud plugin"
      }
    },
    "cloudAzureStorageAccountNewType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS"
      ],
      "metadata": {
        "description": "The type of new storage account for snapshots with Azure Cloud plugin"
      }
    },
    "cloudAzureStorageAccountNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Choose to create a new storage account or use an existing one for snapshots with Azure Cloud plugin"
      }
    },
    "cloudAzureStorageAccountNewUnique": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Whether the new storage account to use for snapshots has been validated to be unique. If set to Yes then the new storage account name will be taken verbatim; if set to No then the first 11 characters of the storage account name will be taken as a prefix to a randomly generated unique storage account name"
      }
    },
    "loadBalancerType": {
      "type": "string",
      "defaultValue": "internal",
      "allowedValues": [
        "internal",
        "external"
      ],
      "metadata": {
        "description": "Setup the load balancer as internal or external. If you are setting up Elasticsearch on an external endpoint you will need to secure your nodes with a product like Elastic's Shield"
      }
    },
    "esPlugins": {
      "type": "string",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "defaultValue": "Yes",
      "metadata": {
        "description": "Install the Plugins - Marvel, Shield, Watcher, Graph* (Elasticsearch version permitting)"
      }
    },
    "esAdditionalPlugins": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Install additional Plugins - e.g. delete-by-query;lmenezes/elasticsearch-kopf/2.0"
      }
    },
    "kibana": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Provision a machine with Kibana on it"
      }
    },
    "vmHostNamePrefix": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 5,
      "metadata": {
        "description": "The prefix to use for hostnames when naming virtual machines in the cluster. Can be up to 5 characters in length, must begin with an alphanumeric character and can contain alphanumeric and hyphen characters. Hostnames are used for resolution of master nodes so if you are deploying a cluster into an existing virtual network containing an existing Elasticsearch cluster, be sure to set this to a unique prefix to differentiate the hostnames of this cluster from an existing cluster"
      }
    },
    "vmSizeKibana": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch Kibana node"
      }
    },
    "jumpbox": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Optionally add a virtual machine to the deployment which you can use to connect and manage virtual machines on the internal network"
      }
    },
    "vmSizeDataNodes": {
      "type": "string",
      "defaultValue": "Standard_D1",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch data nodes"
      }
    },
    "vmDataNodeCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Elasticsearch data nodes"
      }
    },
    "dataNodesAreMasterEligible": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Make all data nodes master-eligible, this can be useful for small elasticsearch cluster deployments"
      }
    },
    "vmSizeMasterNodes": {
      "type": "string",
      "defaultValue": "Standard_D1",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch master nodes, if data nodes are not master eligible 3 of these will be provisioned"
      }
    },
    "vmClientNodeCount": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of Elasticsearch client nodes to provision (Setting this to zero puts the data nodes on the load balancer)"
      }
    },
    "vmSizeClientNodes": {
      "type": "string",
      "defaultValue": "Standard_D1",
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch client nodes"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username used when provisioning virtual machines"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": ""
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    },
    "sshPublicKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    },
    "shieldAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Shield password for the 'es_admin' user with admin role, must be > 6 characters"
      }
    },
    "shieldReadPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Shield password for the 'es_read' user with user (read-only) role, must be > 6 characters"
      }
    },
    "shieldKibanaPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Shield password for the `es_kibana` user with kibana4 role, must be > 6 characters"
      }
    },
    "location": {
      "type": "string",
      "allowedValues": [
        "ResourceGroup",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2"
      ],
      "defaultValue": "ResourceGroup",
      "metadata": {
        "description": "Location where resources will be provisioned.  A value of 'ResourceGroup' will deploy the resource to the same location of the resource group the resources are provisioned into"
      }
    },
    "vNetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Choose to create a new Virtual Network or use an existing one. If choosing an existing network, the subnet also needs to exist."
      }
    },
    "vNetName": {
      "type": "string",
      "defaultValue": "es-net",
      "metadata": {
        "description": "Virtual Network Name"
      }
    },
    "vNetSubnetName": {
      "type": "string",
      "defaultValue": "es-subnet",
      "metadata": {
        "description": "Subnet name to use for Elasticsearch nodes"
      }
    },
    "vNetLoadBalancerIp": {
      "type": "string",
      "defaultValue": "10.0.0.4",
      "metadata": {
        "description": "The static IP address for the internal load balancer. This must be an available IP address in the specified subnet"
      }
    },
    "vNetExistingResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the resource group of the Existing Virtual Network. Required when using an existing Virtual Network"
      }
    },
    "vNetNewAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "The address prefix size to use for a New Virtual Network. Required when creating a new Virtual Network"
      }
    },
    "vNetNewSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "The address space of the subnet. Required when creating a new Virtual Network"
      }
    },
    "userCompany": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of your company"
      }
    },
    "userEmail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Your email address"
      }
    },
    "userFirstName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Your first name"
      }
    },
    "userLastName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Your last name"
      }
    },
    "userJobTitle": {
      "type": "string",
      "defaultValue": "Other",
      "allowedValues": [
        "IT Executive (CIO, CTO, VP Engineering, etc.)",
        "Business Executive (CEO, COO, CMO, etc.)",
        "Architect",
        "Business Development/Alliance Manager",
        "DBA",
        "Technical Operations",
        "Director / Development Manager",
        "Product / Project Manager",
        "Software Developer / Engineer",
        "Consultant",
        "Student",
        "Other"
      ],
      "metadata": {
        "description": "Your job title. Pick the nearest description that matches"
      }
    },
    "userCountry": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The country in which you are based"
      }
    }
  },
  "variables": {
    "locationMap": {
      "ResourceGroup": "[resourceGroup().location]",
      "eastasia": "[resourceGroup().location]",
      "southeastasia": "[resourceGroup().location]",
      "centralus": "[resourceGroup().location]",
      "eastus": "[resourceGroup().location]",
      "eastus2": "[resourceGroup().location]",
      "westus": "[resourceGroup().location]",
      "northcentralus": "[resourceGroup().location]",
      "southcentralus": "[resourceGroup().location]",
      "northeurope": "[resourceGroup().location]",
      "westeurope": "[resourceGroup().location]",
      "japanwest": "[resourceGroup().location]",
      "japaneast": "[resourceGroup().location]",
      "brazilsouth": "[resourceGroup().location]",
      "australiaeast": "[resourceGroup().location]",
      "australiasoutheast": "[resourceGroup().location]",
      "southindia": "[resourceGroup().location]",
      "centralindia": "[resourceGroup().location]",
      "westindia": "[resourceGroup().location]",
      "canadacentral": "[resourceGroup().location]",
      "canadaeast": "[resourceGroup().location]",
      "uksouth": "[resourceGroup().location]",
      "ukwest": "[resourceGroup().location]",
      "westcentralus": "[resourceGroup().location]",
      "westus2": "[resourceGroup().location]"
    },
    "location": "[variables('locationMap')[parameters('location')]]",
    "templateBaseUrl": "[concat(parameters('artifactsBaseUrl'), '/')]",
    "sharedTemplateUrl": "[concat(variables('templateBaseUrl'), '/partials/shared-resources.json')]",
    "loadBalancerTemplateUrl": "[concat(variables('templateBaseUrl'), '/loadbalancers/', parameters('loadBalancerType') ,'-lb-resources.json')]",
    "masterTemplates": {
      "No": "machines/master-nodes-resources.json",
      "Yes": "empty/empty-master-nodes-resources.json"
    },
    "masterTemplateUrl": "[concat(variables('templateBaseUrl'), variables('masterTemplates')[parameters('dataNodesAreMasterEligible')])]",
    "jumpboxTemplates": {
      "No": "empty/empty-jumpbox-resources.json",
      "Yes": "machines/jumpbox-resources.json"
    },
    "jumpboxTemplateUrl": "[concat(variables('templateBaseUrl'), variables('jumpboxTemplates')[parameters('jumpbox')])]",
    "kibanaTemplates": {
      "No": "empty/empty-kibana-resources.json",
      "Yes": "machines/kibana-resources.json"
    },
    "kibanaTemplateUrl": "[concat(variables('templateBaseUrl'), variables('kibanaTemplates')[parameters('kibana')])]",
    "clientTemplates": [
      "empty/empty-client-nodes-resources.json",
      "machines/client-nodes-resources.json"
    ],
    "clientResourceIndex": "[mod(add(parameters('vmClientNodeCount'),2),add(parameters('vmClientNodeCount'),1))]",
    "clientTemplateUrl": "[concat(variables('templateBaseUrl'), variables('clientTemplates')[variables('clientResourceIndex')])]",
    "cloudAzureStorageAccountTemplates": {
      "new": "storageAccounts/new-storage-account.json",
      "existing": "storageAccounts/existing-storage-account.json"
    },
    "cloudAzureStorageAccountNameMap": {
      "new": {
        "Yes": "[parameters('cloudAzureStorageAccountName')]",
        "No": "[concat(take(parameters('cloudAzureStorageAccountName'), 11), uniqueString(resourceGroup().id, subscription().id, deployment().name))]"
      },
      "existing": {
        "Yes": "[parameters('cloudAzureStorageAccountName')]",
        "No": "[parameters('cloudAzureStorageAccountName')]"
      }
    },
    "cloudAzureStorageAccountResourceGroupMap": {
      "new": "[resourceGroup().name]",
      "existing": "[parameters('cloudAzureStorageAccountExistingResourceGroup')]"
    },
    "cloudAzureStorageAccountTemplateUrl": "[concat(variables('templateBaseUrl'), variables('cloudAzureStorageAccountTemplates')[parameters('cloudAzureStorageAccountNewOrExisting')])]",
    "cloudAzureStorageAccount": {
      "name": "[variables('cloudAzureStorageAccountNameMap')[parameters('cloudAzureStorageAccountNewOrExisting')][parameters('cloudAzureStorageAccountNewUnique')]]",
      "type": "[parameters('cloudAzureStorageAccountNewType')]",
      "resourceGroup": "[variables('cloudAzureStorageAccountResourceGroupMap')[parameters('cloudAzureStorageAccountNewOrExisting')]]",
      "location": "[variables('location')]"
    },
    "credentials": {
      "adminUsername": "[parameters('adminUsername')]",
      "password": "[parameters('adminPassword')]",
      "authenticationType": "[parameters('authenticationType')]",
      "sshPublicKey": "[parameters('sshPublicKey')]"
    },
    "esToKibanaMapping": {
      "2.0.2": "4.2.2",
      "2.1.2": "4.3.3",
      "2.2.0": "4.4.2",
      "2.3.2": "4.5.4",
      "2.3.3": "4.5.4",
      "2.3.4": "4.5.4",
      "2.3.5": "4.5.4",
      "2.4.0": "4.6.1",
      "2.4.1": "4.6.1"
    },
    "esSettings": {
      "clusterName": "[parameters('esClusterName')]",
      "version": "[parameters('esVersion')]",
      "installPlugins": "[parameters('esPlugins')]",
      "installAdditionalPlugins": "[parameters('esAdditionalPlugins')]",
      "shieldAdminPwd": "[parameters('shieldAdminPassword')]",
      "shieldReadPwd": "[parameters('shieldReadPassword')]",
      "shieldKibanaPwd": "[parameters('shieldKibanaPassword')]",
      "shieldKibanaServerPwd": "[uniqueString(resourceGroup().id, deployment().name, parameters('shieldKibanaPassword'))]",
      "kibanaVersion": "[variables('esToKibanaMapping')[parameters('esVersion')]]"
    },
    "masterNodeCount": {
      "No": "3",
      "Yes": "0"
    },
    "kibanajumpboxNodeCount": {
      "No": "0",
      "Yes": "1"
    },
    "namespacePrefix": "[parameters('vmHostNamePrefix')]",
    "clusterSetup": {
      "dataNodesAreMasterEligible": "[parameters('dataNodesAreMasterEligible')]",
      "vmDataNodeCount": "[parameters('vmDataNodeCount')]",
      "vmHostNamePrefix": "[variables('namespacePrefix')]",
      "vNetLoadBalancerIp": "[parameters('vNetLoadBalancerIp')]",
      "setup": "[concat('m=', variables('masterNodeCount')[parameters('dataNodesAreMasterEligible')], ' ', parameters('vmSizeMasterNodes'), ',d=', parameters('vmDataNodeCount'), ' ', parameters('vmSizeDataNodes'), ',c=', parameters('vmClientNodeCount'), ' ', parameters('vmSizeClientNodes'), ',k=', variables('kibanajumpboxNodeCount')[parameters('kibana')], ' ', parameters('vmSizeKibana'), ',j=', variables('kibanajumpboxNodeCount')[parameters('jumpbox')], ' Standard_A0', ',l=', parameters('loadBalancerType'))]"
    },
    "userDetails": {
      "email": "[parameters('userEmail')]",
      "firstName": "[parameters('userFirstName')]",
      "lastName": "[parameters('userLastName')]",
      "jobTitle": "[parameters('userJobTitle')]",
      "company": "[parameters('userCompany')]",
      "country": "[parameters('userCountry')]"
    },
    "OS": "ubuntu",
    "osSettingsTemplateUrl": "[concat(variables('templateBaseUrl'), 'settings/', variables('OS'), 'Settings.json')]",
    "storageAccountPrefix": "elastic",
    "storageAccountNameShared": "[concat(variables('storageAccountPrefix'), 's', uniqueString(resourceGroup().id, deployment().name))]",
    "networkTemplateUrl": "[concat(variables('templateBaseUrl'), 'networks/', parameters('vNetNewOrExisting'), '-virtual-network.json')]",
    "networkResourceGroupMap": {
      "new": "[resourceGroup().name]",
      "existing": "[parameters('vNetExistingResourceGroup')]"
    },
    "networkSettings": {
      "name": "[parameters('vNetName')]",
      "resourceGroup": "[variables('networkResourceGroupMap')[parameters('vNetNewOrExisting')]]",
      "location": "[variables('location')]",
      "addressPrefix": "[parameters('vNetNewAddressPrefix')]",
      "subnet": {
        "name": "[parameters('vNetSubnetName')]",
        "addressPrefix": "[parameters('vNetNewSubnetAddressPrefix')]",
        "loadbalancerIp": "[parameters('vNetLoadBalancerIp')]"
      }
    },
    "backendPoolConfigurations": {
      "internal": [
        {
          "id": "[concat(resourceId('Microsoft.Network/loadBalancers','es-internal-lb'),'/backendAddressPools/LBBE')]"
        }
      ],
      "external": [
        {
          "id": "[concat(resourceId('Microsoft.Network/loadBalancers','es-internal-lb'),'/backendAddressPools/LBBE')]"
        },
        {
          "id": "[concat(resourceId('Microsoft.Network/loadBalancers','es-external-lb'),'/backendAddressPools/LBBE')]"
        }
      ]
    },
    "lbBackEndPoolsAdded": {
      "backendPools": "[variables('backendPoolConfigurations')[parameters('loadBalancerType')]]"
    },
    "lbBackendPoolsRemoved": {
      "backendPools": []
    },
    "dataLBOptions": [
      "[variables('lbBackEndPoolsAdded')]",
      "[variables('lbBackEndPoolsRemoved')]"
    ],
    "dataLBSettings": "[variables('dataLBOptions')[variables('clientResourceIndex')]]",
    "dataSkuSettings": {
      "Standard_A0": {
        "dataDisks": 1,
        "nodesPerStorageAccount": 10,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A1": {
        "dataDisks": 2,
        "nodesPerStorageAccount": 8,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2": {
        "dataDisks": 4,
        "nodesPerStorageAccount": 6,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A3": {
        "dataDisks": 8,
        "nodesPerStorageAccount": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "dataDisks": 16,
        "nodesPerStorageAccount": 2,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "dataDisks": 4,
        "nodesPerStorageAccount": 6,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "dataDisks": 8,
        "nodesPerStorageAccount": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "dataDisks": 16,
        "nodesPerStorageAccount": 2,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D1": {
        "dataDisks": 2,
        "nodesPerStorageAccount": 8,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "dataDisks": 4,
        "nodesPerStorageAccount": 6,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "dataDisks": 8,
        "nodesPerStorageAccount": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "dataDisks": 16,
        "nodesPerStorageAccount": 2,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "dataDisks": 4,
        "nodesPerStorageAccount": 6,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "dataDisks": 8,
        "nodesPerStorageAccount": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "dataDisks": 16,
        "nodesPerStorageAccount": 2,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "dataDisks": 32,
        "nodesPerStorageAccount": 1,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D1_v2": {
        "dataDisks": 2,
        "nodesPerStorageAccount": 8,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "dataDisks": 4,
        "nodesPerStorageAccount": 6,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "dataDisks": 8,
        "nodesPerStorageAccount": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "dataDisks": 16,
        "nodesPerStorageAccount": 2,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "dataDisks": 32,
        "nodesPerStorageAccount": 1,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "dataDisks": 4,
        "nodesPerStorageAccount": 6,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "dataDisks": 8,
        "nodesPerStorageAccount": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "dataDisks": 16,
        "nodesPerStorageAccount": 2,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "dataDisks": 32,
        "nodesPerStorageAccount": 1,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D15_v2": {
        "dataDisks": 40,
        "nodesPerStorageAccount": 1,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS1": {
        "dataDisks": 2,
        "nodesPerStorageAccount": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "dataDisks": 4,
        "nodesPerStorageAccount": 6,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "dataDisks": 8,
        "nodesPerStorageAccount": 4,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "dataDisks": 16,
        "nodesPerStorageAccount": 2,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11": {
        "dataDisks": 4,
        "nodesPerStorageAccount": 6,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "dataDisks": 8,
        "nodesPerStorageAccount": 4,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "dataDisks": 16,
        "nodesPerStorageAccount": 2,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "dataDisks": 32,
        "nodesPerStorageAccount": 1,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS1_v2": {
        "dataDisks": 2,
        "nodesPerStorageAccount": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "dataDisks": 4,
        "nodesPerStorageAccount": 6,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "dataDisks": 8,
        "nodesPerStorageAccount": 4,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "dataDisks": 16,
        "nodesPerStorageAccount": 2,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "dataDisks": 32,
        "nodesPerStorageAccount": 1,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "dataDisks": 4,
        "nodesPerStorageAccount": 6,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "dataDisks": 8,
        "nodesPerStorageAccount": 4,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "dataDisks": 16,
        "nodesPerStorageAccount": 2,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "dataDisks": 32,
        "nodesPerStorageAccount": 1,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "dataDisks": 40,
        "nodesPerStorageAccount": 1,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F1": {
        "dataDisks": 2,
        "nodesPerStorageAccount": 8,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2": {
        "dataDisks": 4,
        "nodesPerStorageAccount": 6,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4": {
        "dataDisks": 8,
        "nodesPerStorageAccount": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8": {
        "dataDisks": 16,
        "nodesPerStorageAccount": 2,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16": {
        "dataDisks": 32,
        "nodesPerStorageAccount": 1,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F1s": {
        "dataDisks": 2,
        "nodesPerStorageAccount": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F2s": {
        "dataDisks": 4,
        "nodesPerStorageAccount": 6,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F4s": {
        "dataDisks": 8,
        "nodesPerStorageAccount": 4,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F8s": {
        "dataDisks": 16,
        "nodesPerStorageAccount": 2,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F16s": {
        "dataDisks": 32,
        "nodesPerStorageAccount": 1,
        "storageAccountType": "Premium_LRS"
      }
    },
    "nodesPerStorageAccount": "[variables('dataSkuSettings')[parameters('vmSizeDataNodes')].nodesPerStorageAccount]",
    "storageAccountsCount": "[add(div(parameters('vmDataNodeCount'), variables('nodesPerStorageAccount')), mod(add(mod(parameters('vmDataNodeCount'), variables('nodesPerStorageAccount')),2), add(mod(parameters('vmDataNodeCount'), variables('nodesPerStorageAccount')),1)))]",
    "dataNodeStorageSettings": {
      "count": "[variables('storageAccountsCount')]",
      "nodesPerStorageAccount": "[variables('nodesPerStorageAccount')]",
      "accountType": "[variables('dataSkuSettings')[parameters('vmSizeDataNodes')].storageAccountType]"
    },
    "dataTemplateUrl": "[concat(variables('templateBaseUrl'), 'datanodes/data-node-', string(variables('dataSkuSettings')[parameters('vmSizeDataNodes')].dataDisks), 'disk-resources.json')]",
    "sharedVmConfig": {
      "storageAccountName": "[variables('storageAccountNameShared')]",
      "location": "[variables('location')]",
      "subnet": "[variables('networkSettings').subnet]",
      "subnetId": "[concat(resourceId(variables('networkSettings').resourceGroup, 'Microsoft.Network/virtualNetworks', variables('networkSettings').name), '/subnets/', variables('networkSettings').subnet.name)]",
      "credentials": "[variables('credentials')]"
    }
  },
  "resources": [
    {
      "name": "shared",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('sharedTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountNameShared')]"
          }
        }
      }
    },
    {
      "name": "cloud-azure-storage-account",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('cloudAzureStorageAccountTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "cloudAzureStorageAccount": {
            "value": "[variables('cloudAzureStorageAccount')]"
          }
        }
      }
    },
    {
      "name": "network",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('networkTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          }
        }
      }
    },
    {
      "name": "loadbalancer",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'shared')]",
        "[concat('Microsoft.Resources/deployments/', 'network')]",
        "[concat('Microsoft.Resources/deployments/', 'cloud-azure-storage-account')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('loadBalancerTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          }
        }
      }
    },
    {
      "name": "os-settings",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'cloud-azure-storage-account')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('osSettingsTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "esSettings": {
            "value": "[variables('esSettings')]"
          },
          "userDetails": {
            "value": "[variables('userDetails')]"
          },
          "clusterSetup": {
            "value": "[variables('clusterSetup')]"
          },
          "templateBaseUrl": {
            "value": "[variables('templateBaseUrl')]"
          },
          "cloudAzureStorageAccount": {
            "value": {
              "name": "[reference('cloud-azure-storage-account').outputs.name.value]",
              "key": "[reference('cloud-azure-storage-account').outputs.key.value]"
            }
          }
        }
      }
    },
    {
      "name": "master-nodes",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'loadbalancer')]",
        "[concat('Microsoft.Resources/deployments/', 'os-settings')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('masterTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "templateBaseUrl": {
            "value": "[variables('templateBaseUrl')]"
          },
          "vm": {
            "value": {
              "shared": "[variables('sharedVmConfig')]",
              "namespace": "[concat(variables('namespacePrefix'), 'master-')]",
              "installScript": "[reference('os-settings').outputs.settings.value.extensionSettings.master]",
              "size": "[parameters('vmSizeMasterNodes')]",
              "count": 3,
              "useSharedStorageAccount": "Yes",
              "useBackendPools": "No",
              "backendPools": [],
              "imageReference": "[reference('os-settings').outputs.settings.value.imageReference]"
            }
          }
        }
      }
    },
    {
      "name": "client-nodes",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'loadbalancer')]",
        "[concat('Microsoft.Resources/deployments/', 'os-settings')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('clientTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "templateBaseUrl": {
            "value": "[variables('templateBaseUrl')]"
          },
          "vm": {
            "value": {
              "shared": "[variables('sharedVmConfig')]",
              "namespace": "[concat(variables('namespacePrefix'), 'client-')]",
              "installScript": "[reference('os-settings').outputs.settings.value.extensionSettings.client]",
              "size": "[parameters('vmSizeClientNodes')]",
              "count": "[parameters('vmClientNodeCount')]",
              "useSharedStorageAccount": "Yes",
              "useBackendPools": "Yes",
              "backendPools": "[variables('lbBackEndPoolsAdded').backendPools]",
              "imageReference": "[reference('os-settings').outputs.settings.value.imageReference]"
            }
          }
        }
      }
    },
    {
      "name": "data-nodes",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'loadbalancer')]",
        "[concat('Microsoft.Resources/deployments/', 'os-settings')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('dataTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "templateBaseUrl": {
            "value": "[variables('templateBaseUrl')]"
          },
          "vm": {
            "value": {
              "shared": "[variables('sharedVmConfig')]",
              "namespace": "[concat(variables('namespacePrefix'), 'data-')]",
              "installScript": "[reference('os-settings').outputs.settings.value.extensionSettings.data]",
              "size": "[parameters('vmSizeDataNodes')]",
              "count": "[parameters('vmDataNodeCount')]",
              "useSharedStorageAccount": "No",
              "useBackendPools": "Yes",
              "backendPools": "[variables('dataLBSettings').backendPools]",
              "imageReference": "[reference('os-settings').outputs.settings.value.imageReference]"
            }
          },
          "storageSettings": {
            "value": "[variables('dataNodeStorageSettings')]"
          }
        }
      }
    },
    {
      "name": "jumpbox",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'loadbalancer')]",
        "[concat('Microsoft.Resources/deployments/', 'os-settings')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('jumpboxTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "templateBaseUrl": {
            "value": "[variables('templateBaseUrl')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountNameShared')]"
          },
          "credentials": {
            "value": "[variables('credentials')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "namespace": {
            "value": "[concat(variables('namespacePrefix'), 'jumpbox')]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "osSettings": {
            "value": "[reference('os-settings').outputs.settings.value]"
          }
        }
      }
    },
    {
      "name": "kibana",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'loadbalancer')]",
        "[concat('Microsoft.Resources/deployments/', 'os-settings')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('kibanaTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "templateBaseUrl": {
            "value": "[variables('templateBaseUrl')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountNameShared')]"
          },
          "credentials": {
            "value": "[variables('credentials')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "namespace": {
            "value": "[concat(variables('namespacePrefix'), 'kibana')]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "osSettings": {
            "value": "[reference('os-settings').outputs.settings.value]"
          },
          "vmSize": {
            "value": "[parameters('vmSizeKibana')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "loadbalancer": {
      "value": "[reference('loadbalancer').outputs.fqdn.value]",
      "type": "string"
    },
    "kibana": {
      "value": "[reference('kibana').outputs.fqdn.value]",
      "type": "string"
    },
    "jumpbox-ssh": {
      "value": "[reference('jumpbox').outputs.ssh.value]",
      "type": "string"
    }
  }
}
