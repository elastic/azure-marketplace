{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1272.37030",
      "templateHash": "17652025813301109748"
    }
  },
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/elastic/azure-marketplace/master/src/",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located, including a trailing '/'"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation. When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      }
    },
    "elasticTags": {
      "type": "object",
      "defaultValue": {
        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9",
        "tracking": "pid-B2C934E3-29F3-4194-BFD2-4F1370B78E0C"
      },
      "metadata": {
        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
      }
    },
    "esVersion": {
      "type": "string",
      "defaultValue": "7.11.1",
      "allowedValues": [
        "6.8.14",
        "7.4.2",
        "7.5.2",
        "7.6.2",
        "7.7.1",
        "7.8.1",
        "7.9.3",
        "7.10.2",
        "7.11.1",
        "7.17.0"
      ],
      "metadata": {
        "description": "Elastic Stack version to install"
      }
    },
    "esClusterName": {
      "type": "string",
      "defaultValue": "elasticsearch",
      "metadata": {
        "description": "The name of the Elasticsearch cluster"
      }
    },
    "loadBalancerType": {
      "type": "string",
      "defaultValue": "internal",
      "allowedValues": [
        "internal",
        "external",
        "gateway"
      ],
      "metadata": {
        "description": "Set up an internal or external load balancer, or use Application Gateway (gateway) for load balancing and SSL offload. If you are setting up Elasticsearch on a publicly available endpoint, it is *strongly recommended* to secure your nodes with a product like the Elastic Stack's Security features"
      }
    },
    "loadBalancerInternalSku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "metadata": {
        "description": "The internal load balancer SKU type."
      }
    },
    "loadBalancerExternalSku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "metadata": {
        "description": "The external load balancer SKU type. Only valid when loadBalancerType is 'external'"
      }
    },
    "azureCloudPlugin": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Choose whether to install Azure Repository plugin. The plugin allows a Azure storage account to be used for snapshot and restore. If azureCloudStorageAccountName and azureCloudStorageAccountKey are not supplied, will use the shared storage account deployed."
      }
    },
    "azureCloudStorageAccountName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 24,
      "metadata": {
        "description": "The name of an existing storage account to use for snapshots with Azure Repository plugin. Must be between 3 and 24 alphanumeric lowercase or characters or numbers."
      }
    },
    "azureCloudStorageAccountResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 90,
      "metadata": {
        "description": "The name of an existing resource group in which the storage account to use for snapshots with Azure Repository plugin is located. Must be 90 character or less"
      }
    },
    "xpackPlugins": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Install a trial license to enable access to the Elastic Stack platinum features for 30 days. For Elastisearch less than version 6.3.0, a value of 'Yes' enables these features by installing the X-Pack plugin into each deployed Elastic Stack product. For Elastisearch less than version 6.3.0, a value of 'No' does not install the X-Pack plugin and the Elastic Stack is deployed with features available under OSS. For Elasticsearch 6.3.0+, a value of 'No' deploys the Elastic Stack with the basic license level features available."
      }
    },
    "esAdditionalPlugins": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Additional Elasticsearch plugins to install.  Each plugin must be separated by a semicolon. e.g. analysis-icu;ingest-geoip"
      }
    },
    "esAdditionalYaml": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Additional configuration for Elasticsearch yaml configuration file. Each line must be separated by a newline character e.g. action.auto_create_index: .security\nindices.queries.cache.size:5%"
      }
    },
    "esHeapSize": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "The size, in megabytes, of memory to allocate on each Elasticsearch node for the JVM heap. If unspecified, 50% of the available memory will be allocated to Elasticsearch heap, up to a maximum of 31744MB (~32GB)."
      }
    },
    "esHttpCertBlob": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A Base-64 encoded form of the PKCS#12 archive (.p12/.pfx) containing the key and certificate used to secure HTTP layer of Elasticsearch. Requires xpackPlugins be set to 'Yes' or esVersion to be >= 6.8.0 and < 7.0.0, or >= 7.1.0"
      }
    },
    "esHttpCertPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "The password for the PKCS#12 archive (.p12/.pfx) containing the key and certificate used to secure HTTP layer of Elasticsearch. Requires xpackPlugins be set to 'Yes' or esVersion to be >= 6.8.0 and < 7.0.0, or >= 7.1.0"
      }
    },
    "esHttpCaCertBlob": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A Base-64 encoded form of the PKCS#12 archive (.p12/.pfx) containing the CA key and certificate used to secure HTTP layer of Elasticsearch. Requires xpackPlugins be set to 'Yes' or esVersion to be >= 6.8.0 and < 7.0.0, or >= 7.1.0"
      }
    },
    "esHttpCaCertPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "The password for the PKCS#12 archive (.p12/.pfx) containing the CA key and certificate used to secure HTTP layer of Elasticsearch. Requires xpackPlugins be set to 'Yes' or esVersion to be >= 6.8.0 and < 7.0.0, or >= 7.1.0"
      }
    },
    "esTransportCaCertBlob": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A Base-64 encoded form of the PKCS#12 archive (.p12/.pfx) containing the CA key and certificate used to secure Transport layer of Elasticsearch. Requires xpackPlugins be set to 'Yes' or esVersion to be >= 6.8.0 and < 7.0.0, or >= 7.1.0"
      }
    },
    "esTransportCaCertPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "The password for the PKCS#12 archive (.p12/.pfx) containing the CA key and certificate used to secure Transport layer of Elasticsearch. Requires xpackPlugins be set to 'Yes' or esVersion to be >= 6.8.0 and < 7.0.0, or >= 7.1.0"
      }
    },
    "esTransportCertPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "The password for the generated certificate used to secure Transport layer of Elasticsearch. Requires xpackPlugins be set to 'Yes' or esVersion to be >= 6.8.0 and < 7.0.0, or >= 7.1.0"
      }
    },
    "samlMetadataUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The URI from which the metadata file for the Identity Provider can be retrieved to configure SAML Single-Sign-On"
      }
    },
    "samlServiceProviderUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The public URI for the Service Provider to configure SAML Single-Sign-On. If samlMetadataUri is provided but a value is not provided for samlServiceProviderUri, the public domain name for the Kibana instance will be used"
      }
    },
    "kibana": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Provision a machine with Kibana on it"
      }
    },
    "vmSizeKibana": {
      "type": "string",
      "defaultValue": "Standard_A2_v2",
      "allowedValues": [
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_A8_v2",
        "Standard_A2m_v2",
        "Standard_A4m_v2",
        "Standard_A8m_v2",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D48_v3",
        "Standard_D64_v3",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D48s_v3",
        "Standard_D64s_v3",
        "Standard_E2_v3",
        "Standard_E4_v3",
        "Standard_E8_v3",
        "Standard_E16_v3",
        "Standard_E32_v3",
        "Standard_E64_v3",
        "Standard_E64i_v3",
        "Standard_E2s_v3",
        "Standard_E4s_v3",
        "Standard_E8s_v3",
        "Standard_E16s_v3",
        "Standard_E32s_v3",
        "Standard_E64s_v3",
        "Standard_E64is_v3",
        "Standard_E2as_v4",
        "Standard_E4as_v4",
        "Standard_E8as_v4",
        "Standard_E16as_v4",
        "Standard_E20as_v4",
        "Standard_E32as_v4",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L8s_v2",
        "Standard_L16s_v2",
        "Standard_L32s_v2",
        "Standard_L48s_v2",
        "Standard_L64s_v2",
        "Standard_L80s_v2",
        "Standard_M8ms",
        "Standard_M16ms",
        "Standard_M32ts",
        "Standard_M32ls",
        "Standard_M32ms",
        "Standard_M64s",
        "Standard_M64ls",
        "Standard_M64ms",
        "Standard_M128s",
        "Standard_M128ms",
        "Standard_M64",
        "Standard_M64m",
        "Standard_M128",
        "Standard_M128m"
      ],
      "metadata": {
        "description": "Size of the Kibana node"
      }
    },
    "vmKibanaAcceleratedNetworking": {
      "type": "string",
      "defaultValue": "Default",
      "allowedValues": [
        "Default",
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Whether to enable accelerated networking for Kibana, which enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance. Valid only for specific VM SKUs"
      }
    },
    "kibanaCertBlob": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A Base-64 encoded form of the PEM certificate (.crt) to secure HTTP communication between the browser and Kibana."
      }
    },
    "kibanaKeyBlob": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "A Base-64 encoded form of the PEM private key (.key) to secure HTTP communication between the browser and Kibana."
      }
    },
    "kibanaKeyPassphrase": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "The passphrase to decrypt the private key. Optional as the key may not be encrypted."
      }
    },
    "kibanaAdditionalYaml": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Additional configuration for Kibana yaml configuration file. Each line must be separated by a newline character e.g. server.ssl.enabled: true\nkibana.defaultAppId: \"home\""
      }
    },
    "logstash": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Provision machines with Logstash"
      }
    },
    "vmSizeLogstash": {
      "type": "string",
      "defaultValue": "Standard_DS1_v2",
      "allowedValues": [
        "Standard_A1_v2",
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_A8_v2",
        "Standard_A2m_v2",
        "Standard_A4m_v2",
        "Standard_A8m_v2",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D48_v3",
        "Standard_D64_v3",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D48s_v3",
        "Standard_D64s_v3",
        "Standard_E2_v3",
        "Standard_E4_v3",
        "Standard_E8_v3",
        "Standard_E16_v3",
        "Standard_E32_v3",
        "Standard_E64_v3",
        "Standard_E64i_v3",
        "Standard_E2s_v3",
        "Standard_E4s_v3",
        "Standard_E8s_v3",
        "Standard_E16s_v3",
        "Standard_E32s_v3",
        "Standard_E64s_v3",
        "Standard_E64is_v3",
        "Standard_E2as_v4",
        "Standard_E4as_v4",
        "Standard_E8as_v4",
        "Standard_E16as_v4",
        "Standard_E20as_v4",
        "Standard_E32as_v4",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L8s_v2",
        "Standard_L16s_v2",
        "Standard_L32s_v2",
        "Standard_L48s_v2",
        "Standard_L64s_v2",
        "Standard_L80s_v2",
        "Standard_M8ms",
        "Standard_M16ms",
        "Standard_M32ts",
        "Standard_M32ls",
        "Standard_M32ms",
        "Standard_M64s",
        "Standard_M64ls",
        "Standard_M64ms",
        "Standard_M128s",
        "Standard_M128ms",
        "Standard_M64",
        "Standard_M64m",
        "Standard_M128",
        "Standard_M128m"
      ],
      "metadata": {
        "description": "Size of the Logstash nodes"
      }
    },
    "vmLogstashCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "The number of Logstash VMs to deploy"
      }
    },
    "vmLogstashAcceleratedNetworking": {
      "type": "string",
      "defaultValue": "Default",
      "allowedValues": [
        "Default",
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Whether to enable accelerated networking for Logstash, which enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance. Valid only for specific VM SKUs"
      }
    },
    "logstashHeapSize": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "The size, in megabytes, of memory to allocate to Logstash for the JVM heap. If unspecified, will default to 1GB"
      }
    },
    "logstashConf": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "base 64 encoded form of a Logstash conf file to deploy."
      }
    },
    "logstashKeystorePassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Logstash keystore."
      }
    },
    "logstashAdditionalPlugins": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Additional Logstash plugins to install.  Each plugin must be separated by a semicolon. e.g. logstash-input-azure_event_hubs;logstash-input-http_poller"
      }
    },
    "logstashAdditionalYaml": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Additional configuration for Logstash yaml configuration file. Each line must be separated by a newline character e.g. pipeline.batch.size: 125\npipeline.batch.delay: 50"
      }
    },
    "jumpbox": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Optionally add a virtual machine to the deployment which can be used to connect and manage virtual machines within the cluster. Not required if installing Kibana, as Kibana can be used as a jumpbox"
      }
    },
    "vmHostNamePrefix": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 5,
      "metadata": {
        "description": "The prefix to use for resources and hostnames when naming virtual machines in the cluster. Can be up to 5 characters in length, must begin with an alphanumeric character and can contain alphanumeric and hyphen characters. Hostnames are used for resolution of master nodes so if you are deploying a cluster into an existing virtual network containing an existing Elasticsearch cluster, be sure to set this to a unique prefix to differentiate the hostnames of this cluster from an existing cluster"
      }
    },
    "vmSizeDataNodes": {
      "type": "string",
      "defaultValue": "Standard_DS1_v2",
      "allowedValues": [
        "Standard_A1_v2",
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_A8_v2",
        "Standard_A2m_v2",
        "Standard_A4m_v2",
        "Standard_A8m_v2",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D48_v3",
        "Standard_D64_v3",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D48s_v3",
        "Standard_D64s_v3",
        "Standard_E2_v3",
        "Standard_E4_v3",
        "Standard_E8_v3",
        "Standard_E16_v3",
        "Standard_E32_v3",
        "Standard_E64_v3",
        "Standard_E64i_v3",
        "Standard_E2s_v3",
        "Standard_E4s_v3",
        "Standard_E8s_v3",
        "Standard_E16s_v3",
        "Standard_E32s_v3",
        "Standard_E64s_v3",
        "Standard_E64is_v3",
        "Standard_E2as_v4",
        "Standard_E4as_v4",
        "Standard_E8as_v4",
        "Standard_E16as_v4",
        "Standard_E20as_v4",
        "Standard_E32as_v4",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L8s_v2",
        "Standard_L16s_v2",
        "Standard_L32s_v2",
        "Standard_L48s_v2",
        "Standard_L64s_v2",
        "Standard_L80s_v2",
        "Standard_M8ms",
        "Standard_M16ms",
        "Standard_M32ts",
        "Standard_M32ls",
        "Standard_M32ms",
        "Standard_M64s",
        "Standard_M64ls",
        "Standard_M64ms",
        "Standard_M128s",
        "Standard_M128ms",
        "Standard_M64",
        "Standard_M64m",
        "Standard_M128",
        "Standard_M128m"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch data nodes"
      }
    },
    "vmDataNodeAcceleratedNetworking": {
      "type": "string",
      "defaultValue": "Default",
      "allowedValues": [
        "Default",
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Whether to enable accelerated networking for data nodes, which enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance. Valid only for specific VM SKUs"
      }
    },
    "vmDataDiskCount": {
      "type": "int",
      "defaultValue": 64,
      "minValue": 0,
      "metadata": {
        "description": "Number of disks to attach to each data node in RAID 0 setup. If the number of disks selected is more than can be attached to the data node VM size, the maximum number of disks that can be attached will be used. If 1 disk is selected, it is not RAIDed. If 0 disks are selected, the temporary disk will be used to store Elasticsearch data. IMPORTANT: The temporary disk is ephemeral in nature so be sure you know the trade-offs when choosing 0 disks."
      }
    },
    "vmDataDiskSize": {
      "type": "string",
      "defaultValue": "1TiB",
      "allowedValues": [
        "32GiB",
        "64GiB",
        "128GiB",
        "256GiB",
        "512GiB",
        "1TiB",
        "2TiB",
        "4TiB",
        "8TiB",
        "16TiB",
        "32TiB"
      ],
      "metadata": {
        "description": "The disk size of each attached managed disk, 32GiB, 64GiB, 128GiB, 256 GiB, 512GiB, 1TiB, 2TiB, 4TiB, 8TiB, 16TiB and 32TiB. Default is 1TiB. For Premium Storage, this equates to P6, P10, P15, P20, P30, P40, P50, P60, P70 and P80, respectively."
      }
    },
    "vmDataNodeCount": {
      "type": "int",
      "defaultValue": 3,
      "minValue": 1,
      "metadata": {
        "description": "Number of Elasticsearch data nodes"
      }
    },
    "vmStorageAccountName": {
      "type": "string",
      "defaultValue": "[format('elastic{0}', uniqueString(resourceGroup().id, deployment().name))]"
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Default",
      "allowedValues": [
        "Default",
        "Standard"
      ],
      "metadata": {
        "description": "The storage account type of the attached managed disks and OS disks (Default or Standard). The Default storage account type will be Premium Storage for VMs that support Premium Storage and Standard HDD Storage for those that do not."
      }
    },
    "dataNodesAreMasterEligible": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Make all data nodes master-eligible. This can be useful for small Elasticsearch cluster deployments, but for larger deployments it is recommended to use dedicated master nodes"
      }
    },
    "vmSizeMasterNodes": {
      "type": "string",
      "defaultValue": "Standard_DS1_v2",
      "allowedValues": [
        "Standard_A1_v2",
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_A8_v2",
        "Standard_A2m_v2",
        "Standard_A4m_v2",
        "Standard_A8m_v2",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D48_v3",
        "Standard_D64_v3",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D48s_v3",
        "Standard_D64s_v3",
        "Standard_E2_v3",
        "Standard_E4_v3",
        "Standard_E8_v3",
        "Standard_E16_v3",
        "Standard_E32_v3",
        "Standard_E64_v3",
        "Standard_E64i_v3",
        "Standard_E2s_v3",
        "Standard_E4s_v3",
        "Standard_E8s_v3",
        "Standard_E16s_v3",
        "Standard_E32s_v3",
        "Standard_E64s_v3",
        "Standard_E64is_v3",
        "Standard_E2as_v4",
        "Standard_E4as_v4",
        "Standard_E8as_v4",
        "Standard_E16as_v4",
        "Standard_E20as_v4",
        "Standard_E32as_v4",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L8s_v2",
        "Standard_L16s_v2",
        "Standard_L32s_v2",
        "Standard_L48s_v2",
        "Standard_L64s_v2",
        "Standard_L80s_v2",
        "Standard_M8ms",
        "Standard_M16ms",
        "Standard_M32ts",
        "Standard_M32ls",
        "Standard_M32ms",
        "Standard_M64s",
        "Standard_M64ls",
        "Standard_M64ms",
        "Standard_M128s",
        "Standard_M128ms",
        "Standard_M64",
        "Standard_M64m",
        "Standard_M128",
        "Standard_M128m"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch master nodes, if data nodes are not master eligible, 3 master nodes of this size will be provisioned"
      }
    },
    "vmMasterNodeAcceleratedNetworking": {
      "type": "string",
      "defaultValue": "Default",
      "allowedValues": [
        "Default",
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Whether to enable accelerated networking for master nodes, which enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance. Valid only for specific VM SKUs"
      }
    },
    "vmClientNodeCount": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "metadata": {
        "description": "Number of Elasticsearch coordinating nodes to provision. A value of 0 puts the data nodes in the load balancer backend pool"
      }
    },
    "vmSizeClientNodes": {
      "type": "string",
      "defaultValue": "Standard_DS1_v2",
      "allowedValues": [
        "Standard_A1_v2",
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_A8_v2",
        "Standard_A2m_v2",
        "Standard_A4m_v2",
        "Standard_A8m_v2",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D48_v3",
        "Standard_D64_v3",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D48s_v3",
        "Standard_D64s_v3",
        "Standard_E2_v3",
        "Standard_E4_v3",
        "Standard_E8_v3",
        "Standard_E16_v3",
        "Standard_E32_v3",
        "Standard_E64_v3",
        "Standard_E64i_v3",
        "Standard_E2s_v3",
        "Standard_E4s_v3",
        "Standard_E8s_v3",
        "Standard_E16s_v3",
        "Standard_E32s_v3",
        "Standard_E64s_v3",
        "Standard_E64is_v3",
        "Standard_E2as_v4",
        "Standard_E4as_v4",
        "Standard_E8as_v4",
        "Standard_E16as_v4",
        "Standard_E20as_v4",
        "Standard_E32as_v4",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L8s_v2",
        "Standard_L16s_v2",
        "Standard_L32s_v2",
        "Standard_L48s_v2",
        "Standard_L64s_v2",
        "Standard_L80s_v2",
        "Standard_M8ms",
        "Standard_M16ms",
        "Standard_M32ts",
        "Standard_M32ls",
        "Standard_M32ms",
        "Standard_M64s",
        "Standard_M64ls",
        "Standard_M64ms",
        "Standard_M128s",
        "Standard_M128ms",
        "Standard_M64",
        "Standard_M64m",
        "Standard_M128",
        "Standard_M128m"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch coordinating nodes"
      }
    },
    "vmClientNodeAcceleratedNetworking": {
      "type": "string",
      "defaultValue": "Default",
      "allowedValues": [
        "Default",
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Whether to enable accelerated networking for coordinating nodes, which enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance. Valid only for specific VM SKUs"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username used when provisioning virtual machines"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Choose a password or ssh public key for the Admin username used to access virtual machines"
      }
    },
    "adminPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Admin password"
      }
    },
    "sshPublicKey": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Admin ssh public key"
      }
    },
    "securityBootstrapPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for the bootstrap.password to add to the keystore in 6.x. If no value is supplied, a 13 character password will be generated using the uniqueString() function"
      }
    },
    "securityAdminPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for the built-in 'elastic' user. Should be 12 characters or more, with a minimum of 6 characters"
      }
    },
    "securityKibanaPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for the built-in 'kibana' user. Should be 12 characters or more, with a minimum of 6 characters"
      }
    },
    "securityLogstashPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for the built-in 'logstash_system' user. Should be 12 characters or more, with a minimum of 6 characters"
      }
    },
    "securityBeatsPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for the built-in 'beats_system' user. Should be 12 characters or more, with a minimum of 6 characters. Required for Elasticsearch 6.3.0+ when xpackPlugins is 'Yes'"
      }
    },
    "securityApmPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for the built-in 'apm_system' user. Should be 12 characters or more, with a minimum of 6 characters. Required for Elasticsearch 6.5.0+ when xpackPlugins is 'Yes'"
      }
    },
    "securityRemoteMonitoringPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Password for the built-in 'remote_monitoring_user' user. Should be 12 characters or more, with a minimum of 6 characters. Required for Elasticsearch 6.5.0+ when xpackPlugins is 'Yes'"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location where resources will be provisioned. By default, the template deploys the resources to the same location as the resource group. If specified, must be a valid Azure location e.g. 'australiasoutheast'"
      }
    },
    "vNetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Choose to create a new Virtual Network or use an existing one. If choosing an existing network, the subnet also needs to exist."
      }
    },
    "vNetName": {
      "type": "string",
      "defaultValue": "es-net",
      "metadata": {
        "description": "Virtual Network Name"
      }
    },
    "vNetExistingResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the resource group for the existing Virtual Network. Required when using an existing Virtual Network"
      }
    },
    "vNetNewAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "The address prefix size to use for a New Virtual Network. Required when creating a new Virtual Network"
      }
    },
    "vNetLoadBalancerIp": {
      "type": "string",
      "defaultValue": "10.0.0.4",
      "metadata": {
        "description": "The static IP address for the internal load balancer. This must be an available IP address in the specified subnet"
      }
    },
    "vNetClusterSubnetName": {
      "type": "string",
      "defaultValue": "es-subnet",
      "metadata": {
        "description": "Subnet name to use for Elasticsearch nodes"
      }
    },
    "vNetNewClusterSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/25",
      "metadata": {
        "description": "The address space of the subnet. Required when creating a new Virtual Network"
      }
    },
    "vNetAppGatewaySubnetName": {
      "type": "string",
      "defaultValue": "es-gateway-subnet",
      "metadata": {
        "description": "Subnet name to use for the Application Gateway. Required when selecting Application Gateway for load balancing"
      }
    },
    "vNetNewAppGatewaySubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.128/28",
      "metadata": {
        "description": "The address space of the Application Gateway subnet. Required when creating a new Virtual Network and selecting Application Gateway for load balancing"
      }
    },
    "appGatewayTier": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "WAF"
      ],
      "metadata": {
        "description": "The tier of the Application Gateway. Required when selecting Application Gateway for load balancing"
      }
    },
    "appGatewaySku": {
      "type": "string",
      "defaultValue": "Medium",
      "allowedValues": [
        "Small",
        "Medium",
        "Large"
      ],
      "metadata": {
        "description": "The size of the Application Gateway. Medium or above is recommended for Production clusters, and required when using WAF tier"
      }
    },
    "appGatewayCount": {
      "type": "int",
      "defaultValue": 2,
      "maxValue": 10,
      "minValue": 1,
      "metadata": {
        "description": "The number of instances of the Application Gateway. A minimum of 2 is recommended for Production clusters. Required when selecting Application Gateway for load balancing"
      }
    },
    "appGatewayCertBlob": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "A Base-64 encoded form of the PKCS#12 archive (.p12/.pfx) containing the key and certificate for the Application Gateway. This certificate is used to secure HTTPS connections to the Application Gateway"
      }
    },
    "appGatewayCertPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "The password for the PKCS#12 archive (.p12/.pfx) containing the key and certificate for the Application Gateway."
      }
    },
    "appGatewayWafStatus": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "The firewall status of the Application Gateway. Required when selecting Application Gateway for load balancing and using WAF tier."
      }
    },
    "appGatewayWafMode": {
      "type": "string",
      "defaultValue": "Detection",
      "allowedValues": [
        "Detection",
        "Prevention"
      ],
      "metadata": {
        "description": "The firewall mode of the Application Gateway. Required when selecting Application Gateway for load balancing and using WAF tier."
      }
    },
    "appGatewayEsHttpCertBlob": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The Base-64 encoded certificate (.cer) used to secure the HTTP layer of Elasticsearch. Used by the Application Gateway to whitelist certificates used by the backend pool. Must be set if using esHttpCertBlob to secure the HTTP layer of Elasticsearch"
      }
    }
  },
  "variables": {
    "esVersionMajor": "[int(split(parameters('esVersion'), '.')[0])]",
    "esVersionMinor": "[int(split(parameters('esVersion'), '.')[1])]",
    "resourceGroupLocation": "[parameters('location')]",
    "azureCloudStorageAccount": {
      "name": "[parameters('azureCloudStorageAccountName')]",
      "resourceGroup": "[parameters('azureCloudStorageAccountResourceGroup')]",
      "install": "[parameters('azureCloudPlugin')]"
    },
    "esSettings": {
      "clusterName": "[parameters('esClusterName')]",
      "version": "[parameters('esVersion')]",
      "installPlugins": "[parameters('xpackPlugins')]",
      "installAdditionalPlugins": "[parameters('esAdditionalPlugins')]",
      "yamlConfiguration": "[parameters('esAdditionalYaml')]",
      "heapSize": "[parameters('esHeapSize')]",
      "httpCertBlob": "[parameters('esHttpCertBlob')]",
      "httpCertPassword": "[parameters('esHttpCertPassword')]",
      "httpCaCertBlob": "[parameters('esHttpCaCertBlob')]",
      "httpCaCertPassword": "[parameters('esHttpCaCertPassword')]",
      "transportCaCertBlob": "[parameters('esTransportCaCertBlob')]",
      "transportCaCertPassword": "[parameters('esTransportCaCertPassword')]",
      "transportCertPassword": "[parameters('esTransportCertPassword')]",
      "securityAdminPwd": "[parameters('securityAdminPassword')]",
      "securityKibanaPwd": "[parameters('securityKibanaPassword')]",
      "securityLogstashPwd": "[parameters('securityLogstashPassword')]",
      "securityBeatsPwd": "[parameters('securityBeatsPassword')]",
      "securityApmPwd": "[parameters('securityApmPassword')]",
      "securityRemoteMonitoringPwd": "[parameters('securityRemoteMonitoringPassword')]",
      "securityBootstrapPwd": "[if(not(empty(parameters('securityBootstrapPassword'))), parameters('securityBootstrapPassword'), uniqueString(resourceGroup().id, deployment().name, parameters('securityAdminPassword')))]",
      "samlMetadataUri": "[parameters('samlMetadataUri')]",
      "samlServiceProviderUri": "[parameters('samlServiceProviderUri')]"
    },
    "networkResourceGroupMap": {
      "new": "[resourceGroup().name]",
      "existing": "[parameters('vNetExistingResourceGroup')]"
    },
    "dataSkuSettings": {
      "Standard_A1_v2": {
        "dataDisks": 2,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2_v2": {
        "dataDisks": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4_v2": {
        "dataDisks": 8,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8_v2": {
        "dataDisks": 16,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2m_v2": {
        "dataDisks": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4m_v2": {
        "dataDisks": 8,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8m_v2": {
        "dataDisks": 16,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D1_v2": {
        "dataDisks": 2,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "dataDisks": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "dataDisks": 8,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "dataDisks": 16,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "dataDisks": 32,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "dataDisks": 8,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "dataDisks": 16,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "dataDisks": 32,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "dataDisks": 64,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D15_v2": {
        "dataDisks": 64,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2as_v4": {
        "dataDisks": 4,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D4as_v4": {
        "dataDisks": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D8as_v4": {
        "dataDisks": 16,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D16as_v4": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D32as_v4": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D2_v3": {
        "dataDisks": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v3": {
        "dataDisks": 8,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D8_v3": {
        "dataDisks": 16,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D16_v3": {
        "dataDisks": 32,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D32_v3": {
        "dataDisks": 32,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D48_v3": {
        "dataDisks": 32,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D64_v3": {
        "dataDisks": 32,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS1_v2": {
        "dataDisks": 4,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "dataDisks": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "dataDisks": 16,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "dataDisks": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "dataDisks": 16,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D2s_v3": {
        "dataDisks": 4,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D4s_v3": {
        "dataDisks": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D8s_v3": {
        "dataDisks": 16,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D16s_v3": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D32s_v3": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D48s_v3": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_D64s_v3": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E2_v3": {
        "dataDisks": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E4_v3": {
        "dataDisks": 8,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E8_v3": {
        "dataDisks": 16,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E16_v3": {
        "dataDisks": 32,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E32_v3": {
        "dataDisks": 32,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E64_v3": {
        "dataDisks": 32,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E64i_v3": {
        "dataDisks": 32,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_E2s_v3": {
        "dataDisks": 4,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E4s_v3": {
        "dataDisks": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E8s_v3": {
        "dataDisks": 16,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E16s_v3": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E32s_v3": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E64s_v3": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E64is_v3": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E2as_v4": {
        "dataDisks": 4,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E4as_v4": {
        "dataDisks": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E8as_v4": {
        "dataDisks": 16,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E16as_v4": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E20as_v4": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_E32as_v4": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F1": {
        "dataDisks": 2,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2": {
        "dataDisks": 4,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4": {
        "dataDisks": 8,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8": {
        "dataDisks": 16,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16": {
        "dataDisks": 32,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F1s": {
        "dataDisks": 2,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F2s": {
        "dataDisks": 4,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F4s": {
        "dataDisks": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F8s": {
        "dataDisks": 16,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F16s": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F2s_v2": {
        "dataDisks": 4,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F4s_v2": {
        "dataDisks": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F8s_v2": {
        "dataDisks": 16,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F16s_v2": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F32s_v2": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F64s_v2": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F72s_v2": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_G1": {
        "dataDisks": 8,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "dataDisks": 16,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "dataDisks": 32,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "dataDisks": 64,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "dataDisks": 64,
        "storageAccountType": "Standard_LRS"
      },
      "Standard_GS1": {
        "dataDisks": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "dataDisks": 16,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L4s": {
        "dataDisks": 16,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L8s": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L16s": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L32s": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L8s_v2": {
        "dataDisks": 16,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L16s_v2": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L32s_v2": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L48s_v2": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L64s_v2": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_L80s_v2": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M8ms": {
        "dataDisks": 8,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M16ms": {
        "dataDisks": 16,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M32ts": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M32ls": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M32ms": {
        "dataDisks": 32,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M64s": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M64ls": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M64ms": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M128s": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M128ms": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M64": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M64m": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M128": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      },
      "Standard_M128m": {
        "dataDisks": 64,
        "storageAccountType": "Premium_LRS"
      }
    },
    "dataDiskSizes": {
      "32GiB": 32,
      "64GiB": 64,
      "128GiB": 128,
      "256GiB": 256,
      "512GiB": 512,
      "1TiB": 1024,
      "2TiB": 2048,
      "4TiB": 4096,
      "8TiB": 8192,
      "16TiB": 16384,
      "32TiB": 32767
    },
    "backendPoolConfigurations": {
      "internal": [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}internal-lb', parameters('vmHostNamePrefix')), 'LBBE')]"
        }
      ],
      "external": [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}internal-lb', parameters('vmHostNamePrefix')), 'LBBE')]"
        },
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}external-lb', parameters('vmHostNamePrefix')), 'LBBE')]"
        }
      ],
      "gateway": [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}internal-lb', parameters('vmHostNamePrefix')), 'LBBE')]"
        }
      ]
    },
    "lbBackEndPoolsAdded": {
      "backendPools": "[variables('backendPoolConfigurations')[parameters('loadBalancerType')]]"
    },
    "lbBackendPoolsRemoved": {
      "backendPools": []
    },
    "dataLoadBalancerOptions": [
      "[variables('lbBackEndPoolsAdded')]",
      "[variables('lbBackendPoolsRemoved')]"
    ],
    "clientResourceIndex": "[mod(add(parameters('vmClientNodeCount'), 2), add(parameters('vmClientNodeCount'), 1))]",
    "storageAccountOverrides": {
      "Default": "[variables('dataSkuSettings')[parameters('vmSizeDataNodes')].storageAccountType]",
      "Standard": "Standard_LRS"
    },
    "resolvedStorageAccountType": "[variables('storageAccountOverrides')[parameters('storageAccountType')]]",
    "tmpVmSizeDataDisks": "[variables('dataSkuSettings')[parameters('vmSizeDataNodes')].dataDisks]",
    "dataDiskOptions": [
      "[parameters('vmDataDiskCount')]",
      "[variables('tmpVmSizeDataDisks')]"
    ],
    "resolvedDataDiskCount": "[min(variables('dataDiskOptions'))]",
    "kibanaHttps": "[if(and(greater(length(parameters('kibanaKeyBlob')), 0), greater(length(parameters('kibanaCertBlob')), 0)), 'Yes', 'No')]",
    "newSubNetStartAddress": "[if(equals('new', parameters('vNetNewOrExisting')), first(split(parameters('vNetNewClusterSubnetAddressPrefix'), '/')), '')]",
    "newSubNetStartAddressLastOctet": "[if(equals('new', parameters('vNetNewOrExisting')), int(last(split(variables('newSubNetStartAddress'), '.'))), 0)]",
    "newSubNetStartAddressFirstOctets": "[if(equals('new', parameters('vNetNewOrExisting')), substring(variables('newSubNetStartAddress'), 0, lastIndexOf(variables('newSubNetStartAddress'), '.')), '')]",
    "newSubNetReservedStartAddresses": [
      "[variables('newSubNetStartAddress')]",
      "[format('{0}.{1}', variables('newSubNetStartAddressFirstOctets'), string(add(variables('newSubNetStartAddressLastOctet'), 1)))]",
      "[format('{0}.{1}', variables('newSubNetStartAddressFirstOctets'), string(add(variables('newSubNetStartAddressLastOctet'), 2)))]",
      "[format('{0}.{1}', variables('newSubNetStartAddressFirstOctets'), string(add(variables('newSubNetStartAddressLastOctet'), 3)))]"
    ],
    "newSubNetFirstAvailableAddress": "[format('{0}.{1}', variables('newSubNetStartAddressFirstOctets'), string(add(variables('newSubNetStartAddressLastOctet'), 4)))]",
    "newOrExistingVNetLoadBalancerIp": "[if(equals('existing', parameters('vNetNewOrExisting')), parameters('vNetLoadBalancerIp'), if(contains(variables('newSubNetReservedStartAddresses'), parameters('vNetLoadBalancerIp')), variables('newSubNetFirstAvailableAddress'), parameters('vNetLoadBalancerIp')))]",
    "topologySettings": {
      "dataNodesAreMasterEligible": "[parameters('dataNodesAreMasterEligible')]",
      "vmDataNodeCount": "[parameters('vmDataNodeCount')]",
      "vmSizeDataNodes": "[parameters('vmSizeDataNodes')]",
      "vmDataNodeStorageAccountType": "[variables('dataSkuSettings')[parameters('vmSizeDataNodes')].storageAccountType]",
      "vmDataNodeAcceleratedNetworking": "[parameters('vmDataNodeAcceleratedNetworking')]",
      "vmHostNamePrefix": "[parameters('vmHostNamePrefix')]",
      "vmClientNodeCount": "[parameters('vmClientNodeCount')]",
      "vmSizeClientNodes": "[parameters('vmSizeClientNodes')]",
      "vmClientNodeAcceleratedNetworking": "[parameters('vmClientNodeAcceleratedNetworking')]",
      "vNetLoadBalancerIp": "[variables('newOrExistingVNetLoadBalancerIp')]",
      "vmSizeMasterNodes": "[parameters('vmSizeMasterNodes')]",
      "vmMasterNodeAcceleratedNetworking": "[parameters('vmMasterNodeAcceleratedNetworking')]",
      "vmSizeKibana": "[parameters('vmSizeKibana')]",
      "vmKibanaAcceleratedNetworking": "[parameters('vmKibanaAcceleratedNetworking')]",
      "kibana": "[parameters('kibana')]",
      "kibanaKeyBlob": "[parameters('kibanaKeyBlob')]",
      "kibanaKeyPassphrase": "[parameters('kibanaKeyPassphrase')]",
      "kibanaCertBlob": "[parameters('kibanaCertBlob')]",
      "kibanaHttps": "[variables('kibanaHttps')]",
      "kibanaYaml": "[parameters('kibanaAdditionalYaml')]",
      "vmSizeLogstash": "[parameters('vmSizeLogstash')]",
      "vmLogstashCount": "[parameters('vmLogstashCount')]",
      "vmLogstashAcceleratedNetworking": "[parameters('vmLogstashAcceleratedNetworking')]",
      "logstash": "[parameters('logstash')]",
      "logstashHeapSize": "[parameters('logstashHeapSize')]",
      "logstashConf": "[parameters('logstashConf')]",
      "logstashPlugins": "[parameters('logstashAdditionalPlugins')]",
      "logstashYaml": "[parameters('logstashAdditionalYaml')]",
      "logstashKeystorePwd": "[if(not(empty(parameters('logstashKeystorePassword'))), parameters('logstashKeystorePassword'), uniqueString(resourceGroup().id, deployment().name, parameters('securityLogstashPassword')))]",
      "jumpbox": "[parameters('jumpbox')]",
      "dataNodeStorageSettings": {
        "accountType": "[variables('resolvedStorageAccountType')]",
        "diskSize": "[variables('dataDiskSizes')[parameters('vmDataDiskSize')]]",
        "dataDisks": "[variables('resolvedDataDiskCount')]"
      },
      "dataLoadBalancerBackEndPools": "[variables('dataLoadBalancerOptions')[variables('clientResourceIndex')].backendPools]",
      "loadBalancerBackEndPools": "[variables('lbBackEndPoolsAdded').backendPools]"
    },
    "networkSettings": {
      "name": "[parameters('vNetName')]",
      "namespacePrefix": "[parameters('vmHostNamePrefix')]",
      "resourceGroup": "[variables('networkResourceGroupMap')[parameters('vNetNewOrExisting')]]",
      "location": "[variables('resourceGroupLocation')]",
      "addressPrefix": "[parameters('vNetNewAddressPrefix')]",
      "https": "[if(and(or(greater(length(parameters('esHttpCertBlob')), 0), greater(length(parameters('esHttpCaCertBlob')), 0)), or(or(equals(parameters('xpackPlugins'), 'Yes'), and(greaterOrEquals(variables('esVersionMajor'), 7), greaterOrEquals(variables('esVersionMinor'), 1))), and(equals(variables('esVersionMajor'), 6), greaterOrEquals(variables('esVersionMinor'), 8)))), 'Yes', 'No')]",
      "subnet": {
        "name": "[parameters('vNetClusterSubnetName')]",
        "addressPrefix": "[parameters('vNetNewClusterSubnetAddressPrefix')]",
        "loadbalancerIp": "[variables('newOrExistingVNetLoadBalancerIp')]"
      },
      "applicationGatewaySubnet": {
        "name": "[parameters('vNetAppGatewaySubnetName')]",
        "addressPrefix": "[parameters('vNetNewAppGatewaySubnetAddressPrefix')]"
      },
      "internalSku": "[parameters('loadBalancerInternalSku')]",
      "externalSku": "[parameters('loadBalancerExternalSku')]"
    },
    "commonVmSettings": {
      "namespacePrefix": "[parameters('vmHostNamePrefix')]",
      "storageAccountName": "[parameters('vmStorageAccountName')]",
      "location": "[variables('resourceGroupLocation')]",
      "subnet": "[variables('networkSettings').subnet]",
      "subnetId": "[resourceId(variables('networkSettings').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', variables('networkSettings').name, variables('networkSettings').subnet.name)]",
      "credentials": {
        "adminUsername": "[parameters('adminUsername')]",
        "password": "[parameters('adminPassword')]",
        "authenticationType": "[parameters('authenticationType')]",
        "sshPublicKey": "[parameters('sshPublicKey')]"
      }
    },
    "existingStorageAccountResourceId": "[if(and(not(empty(variables('azureCloudStorageAccount').name)), equals(variables('azureCloudStorageAccount').install, 'Yes')), resourceId(variables('azureCloudStorageAccount').resourceGroup, 'Microsoft.Storage/storageAccounts', variables('azureCloudStorageAccount').name), '')]",
    "sharedStorageAccountResourceId": "[resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('commonVmSettings').storageAccountName)]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "name": "[parameters('elasticTags').tracking]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "shared",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('resourceGroupLocation')]"
          },
          "storageAccountName": {
            "value": "[variables('commonVmSettings').storageAccountName]"
          },
          "azureCloudStorageAccount": {
            "value": "[variables('azureCloudStorageAccount')]"
          },
          "elasticTags": {
            "value": "[parameters('elasticTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1272.37030",
              "templateHash": "10845621086386223599"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location where resources will be provisioned"
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Storage account used for share virtual machine images"
              }
            },
            "azureCloudStorageAccount": {
              "type": "object",
              "defaultValue": {
                "name": "",
                "resourceGroup": "",
                "install": "No"
              },
              "metadata": {
                "description": "Existing storage account used to configure Azure Repository plugin"
              }
            },
            "elasticTags": {
              "type": "object",
              "defaultValue": {
                "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
              },
              "metadata": {
                "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-04-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "Storage",
              "properties": {},
              "tags": {
                "provider": "[toUpper(parameters('elasticTags').provider)]"
              }
            }
          ],
          "outputs": {
            "sharedStorageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "sharedStorageAccountSuffix": {
              "type": "string",
              "value": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))).primaryEndpoints.blob, format('https://{0}.blob.', parameters('storageAccountName')), ''), '/', '')]"
            },
            "existingStorageAccountSuffix": {
              "type": "string",
              "value": "[if(and(not(empty(parameters('azureCloudStorageAccount').name)), equals(parameters('azureCloudStorageAccount').install, 'Yes')), replace(replace(reference(resourceId(parameters('azureCloudStorageAccount').resourceGroup, 'Microsoft.Storage/storageAccounts', parameters('azureCloudStorageAccount').name), '2019-04-01').primaryEndpoints.blob, format('https://{0}.blob.', parameters('azureCloudStorageAccount').name), ''), '/', ''), '')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "network",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vNetNewOrExisting": {
            "value": "[parameters('vNetNewOrExisting')]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "loadBalancerType": {
            "value": "[parameters('loadBalancerType')]"
          },
          "elasticTags": {
            "value": "[parameters('elasticTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1272.37030",
              "templateHash": "13904709499150329571"
            }
          },
          "parameters": {
            "vNetNewOrExisting": {
              "type": "string",
              "allowedValues": [
                "new",
                "existing"
              ],
              "metadata": {
                "description": "Choose to create a new Virtual Network or use an existing one. If choosing an existing network, the subnet also needs to exist."
              }
            },
            "networkSettings": {
              "type": "object",
              "metadata": {
                "description": "Network settings object"
              }
            },
            "loadBalancerType": {
              "type": "string",
              "defaultValue": "internal",
              "allowedValues": [
                "internal",
                "external",
                "gateway"
              ],
              "metadata": {
                "description": "Set up an internal or external load balancer, or use Application Gateway (gateway) for load balancing and SSL offload. If you are setting up Elasticsearch on a publicly available endpoint, it is *strongly recommended* to secure your nodes with a product like Elastic's X-Pack Security"
              }
            },
            "elasticTags": {
              "type": "object",
              "defaultValue": {
                "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
              },
              "metadata": {
                "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
              }
            }
          },
          "resources": [
            {
              "condition": "[equals(parameters('vNetNewOrExisting'), 'New')]",
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2019-04-01",
              "name": "[parameters('networkSettings').name]",
              "location": "[parameters('networkSettings').location]",
              "tags": {
                "provider": "[toUpper(parameters('elasticTags').provider)]"
              },
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('networkSettings').addressPrefix]"
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2019-04-01",
              "name": "[format('{0}/{1}', parameters('networkSettings').name, parameters('networkSettings').subnet.name)]",
              "properties": {
                "addressPrefix": "[parameters('networkSettings').subnet.addressPrefix]"
              }
            },
            {
              "condition": "[equals(parameters('loadBalancerType'), 'gateway')]",
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2019-04-01",
              "name": "[format('{0}/{1}', parameters('networkSettings').name, parameters('networkSettings').applicationGatewaySubnet.name)]",
              "properties": {
                "addressPrefix": "[parameters('networkSettings').applicationGatewaySubnet.addressPrefix]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('networkSettings').name)]"
              ]
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "kibana-ip",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('commonVmSettings').location]"
          },
          "namespace": {
            "value": "[format('{0}kibana', variables('commonVmSettings').namespacePrefix)]"
          },
          "https": {
            "value": "[variables('topologySettings').kibanaHttps]"
          },
          "elasticTags": {
            "value": "[parameters('elasticTags')]"
          },
          "kibana": {
            "value": "[parameters('kibana')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1272.37030",
              "templateHash": "11168207231035624314"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location where resources will be provisioned"
              }
            },
            "namespace": {
              "type": "string",
              "metadata": {
                "description": "The unique namespace for the Kibana VM"
              }
            },
            "kibana": {
              "type": "string",
              "defaultValue": "No",
              "allowedValues": [
                "Yes",
                "No"
              ],
              "metadata": {
                "description": "Whether Kibana is enabled."
              }
            },
            "https": {
              "type": "string",
              "defaultValue": "No",
              "allowedValues": [
                "Yes",
                "No"
              ],
              "metadata": {
                "description": "Controls if the output address should be HTTP or HTTPS"
              }
            },
            "elasticTags": {
              "type": "object",
              "defaultValue": {
                "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
              },
              "metadata": {
                "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
              }
            }
          },
          "variables": {
            "publicIpName": "[format('{0}-ip', parameters('namespace'))]",
            "fqdnSchema": "[if(equals(parameters('https'), 'Yes'), 'https://', 'http://')]"
          },
          "resources": [
            {
              "condition": "[equals(parameters('kibana'), 'Yes')]",
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2019-04-01",
              "name": "[variables('publicIpName')]",
              "location": "[parameters('location')]",
              "tags": {
                "provider": "[toUpper(parameters('elasticTags').provider)]"
              },
              "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                  "domainNameLabel": "[format('kb-{0}', uniqueString(resourceGroup().id, deployment().name, variables('publicIpName')))]"
                }
              }
            }
          ],
          "outputs": {
            "fqdn": {
              "type": "string",
              "value": "[if(equals(parameters('kibana'), 'Yes'), format('{0}{1}:5601', variables('fqdnSchema'), reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))).dnsSettings.fqdn), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'network')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "load-balancer",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationGatewaySettings": {
            "value": {
              "skuName": "[format('{0}_{1}', parameters('appGatewayTier'), parameters('appGatewaySku'))]",
              "tier": "[parameters('appGatewayTier')]",
              "instanceCount": "[parameters('appGatewayCount')]",
              "certBlob": "[parameters('appGatewayCertBlob')]",
              "certPassword": "[parameters('appGatewayCertPassword')]",
              "firewallStatus": "[parameters('appGatewayWafStatus')]",
              "firewallMode": "[parameters('appGatewayWafMode')]",
              "backendCert": "[parameters('appGatewayEsHttpCertBlob')]",
              "backendProtocol": "[if(or(greater(length(parameters('esHttpCertBlob')), 0), greater(length(parameters('esHttpCaCertBlob')), 0)), 'Https', 'Http')]"
            }
          },
          "loadBalancerType": {
            "value": "[parameters('loadBalancerType')]"
          },
          "appGatewayTier": {
            "value": "[parameters('appGatewayTier')]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "elasticTags": {
            "value": "[parameters('elasticTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1272.37030",
              "templateHash": "6563559338123433706"
            }
          },
          "parameters": {
            "loadBalancerType": {
              "type": "string",
              "defaultValue": "internal",
              "allowedValues": [
                "internal",
                "external",
                "gateway"
              ],
              "metadata": {
                "description": "Set up an internal or external load balancer, or use Application Gateway (gateway) for load balancing and SSL offload. If you are setting up Elasticsearch on a publicly available endpoint, it is *strongly recommended* to secure your nodes with a product like the Elastic Stack's Security features"
              }
            },
            "appGatewayTier": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard",
                "WAF"
              ],
              "metadata": {
                "description": "The tier of the Application Gateway. Required when selecting Application Gateway for load balancing"
              }
            },
            "applicationGatewaySettings": {
              "type": "object"
            },
            "networkSettings": {
              "type": "object"
            },
            "elasticTags": {
              "type": "object"
            }
          },
          "variables": {
            "loadBalancer": "[if(equals(parameters('loadBalancerType'), 'gateway'), format('{0}-gateway', toLower(parameters('appGatewayTier'))), parameters('loadBalancerType'))]"
          },
          "resources": [
            {
              "condition": "[equals(variables('loadBalancer'), 'internal')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "internal-load-balancer",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "networkSettings": {
                    "value": "[parameters('networkSettings')]"
                  },
                  "elasticTags": {
                    "value": "[parameters('elasticTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1272.37030",
                      "templateHash": "5027151778175012704"
                    }
                  },
                  "parameters": {
                    "networkSettings": {
                      "type": "object",
                      "metadata": {
                        "description": "Network settings object"
                      }
                    },
                    "elasticTags": {
                      "type": "object",
                      "defaultValue": {
                        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                      },
                      "metadata": {
                        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                      }
                    }
                  },
                  "variables": {
                    "internalLoadBalancerName": "[format('{0}internal-lb', parameters('networkSettings').namespacePrefix)]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/loadBalancers",
                      "apiVersion": "2019-04-01",
                      "name": "[variables('internalLoadBalancerName')]",
                      "location": "[parameters('networkSettings').location]",
                      "sku": {
                        "name": "[parameters('networkSettings').internalSku]"
                      },
                      "tags": {
                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                      },
                      "properties": {
                        "frontendIPConfigurations": [
                          {
                            "name": "LBFE",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId(parameters('networkSettings').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('networkSettings').name, parameters('networkSettings').subnet.name)]"
                              },
                              "privateIPAddress": "[parameters('networkSettings').subnet.loadBalancerIp]",
                              "privateIPAllocationMethod": "Static"
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "LBBE"
                          }
                        ],
                        "loadBalancingRules": [
                          {
                            "name": "es-http-internal",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('internalLoadBalancerName'), 'LBFE')]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('internalLoadBalancerName'), 'LBBE')]"
                              },
                              "protocol": "Tcp",
                              "frontendPort": 9200,
                              "backendPort": 9200,
                              "enableFloatingIP": false,
                              "idleTimeoutInMinutes": 5,
                              "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('internalLoadBalancerName'), 'es-probe-internal-http')]"
                              }
                            }
                          },
                          {
                            "name": "es-transport-internal",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('internalLoadBalancerName'), 'LBFE')]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('internalLoadBalancerName'), 'LBBE')]"
                              },
                              "protocol": "Tcp",
                              "frontendPort": 9300,
                              "backendPort": 9300,
                              "enableFloatingIP": false,
                              "idleTimeoutInMinutes": 5
                            }
                          }
                        ],
                        "probes": [
                          {
                            "name": "es-probe-internal-http",
                            "properties": {
                              "protocol": "Tcp",
                              "port": 9200,
                              "intervalInSeconds": 30,
                              "numberOfProbes": 3
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "outputs": {
                    "fqdn": {
                      "type": "string",
                      "value": "N/A"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(variables('loadBalancer'), 'external')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "external-load-balancer",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "networkSettings": {
                    "value": "[parameters('networkSettings')]"
                  },
                  "elasticTags": {
                    "value": "[parameters('elasticTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1272.37030",
                      "templateHash": "4432293945858250033"
                    }
                  },
                  "parameters": {
                    "networkSettings": {
                      "type": "object",
                      "metadata": {
                        "description": "Network settings object"
                      }
                    },
                    "elasticTags": {
                      "type": "object",
                      "defaultValue": {
                        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                      },
                      "metadata": {
                        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                      }
                    }
                  },
                  "variables": {
                    "httpsOpts": {
                      "Yes": "https://",
                      "No": "http://"
                    },
                    "https": "[variables('httpsOpts')[parameters('networkSettings').https]]",
                    "internalLoadBalancerName": "[format('{0}internal-lb', parameters('networkSettings').namespacePrefix)]",
                    "externalLoadBalancerName": "[format('{0}external-lb', parameters('networkSettings').namespacePrefix)]",
                    "externalLoadBalancerIpName": "[format('{0}external-lb-ip', parameters('networkSettings').namespacePrefix)]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/loadBalancers",
                      "apiVersion": "2019-04-01",
                      "name": "[variables('internalLoadBalancerName')]",
                      "location": "[parameters('networkSettings').location]",
                      "sku": {
                        "name": "[parameters('networkSettings').internalSku]"
                      },
                      "tags": {
                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                      },
                      "properties": {
                        "frontendIPConfigurations": [
                          {
                            "name": "LBFE",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId(parameters('networkSettings').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('networkSettings').name, parameters('networkSettings').subnet.name)]"
                              },
                              "privateIPAddress": "[parameters('networkSettings').subnet.loadBalancerIp]",
                              "privateIPAllocationMethod": "Static"
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "LBBE"
                          }
                        ],
                        "loadBalancingRules": [
                          {
                            "name": "es-http-internal",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('internalLoadBalancerName'), 'LBFE')]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('internalLoadBalancerName'), 'LBBE')]"
                              },
                              "protocol": "Tcp",
                              "frontendPort": 9200,
                              "backendPort": 9200,
                              "enableFloatingIP": false,
                              "idleTimeoutInMinutes": 5,
                              "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('internalLoadBalancerName'), 'es-probe-internal-http')]"
                              }
                            }
                          },
                          {
                            "name": "es-transport-internal",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('internalLoadBalancerName'), 'LBFE')]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('internalLoadBalancerName'), 'LBBE')]"
                              },
                              "protocol": "Tcp",
                              "frontendPort": 9300,
                              "backendPort": 9300,
                              "enableFloatingIP": false,
                              "idleTimeoutInMinutes": 5
                            }
                          }
                        ],
                        "probes": [
                          {
                            "name": "es-probe-internal-http",
                            "properties": {
                              "protocol": "Tcp",
                              "port": 9200,
                              "intervalInSeconds": 30,
                              "numberOfProbes": 3
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2019-04-01",
                      "name": "[variables('externalLoadBalancerIpName')]",
                      "location": "[parameters('networkSettings').location]",
                      "sku": {
                        "name": "[parameters('networkSettings').externalSku]"
                      },
                      "tags": {
                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "[if(equals(parameters('networkSettings').externalSku, 'Standard'), 'Static', 'Dynamic')]",
                        "dnsSettings": {
                          "domainNameLabel": "[format('lb-{0}', uniqueString(resourceGroup().id, deployment().name))]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/loadBalancers",
                      "apiVersion": "2019-04-01",
                      "name": "[variables('externalLoadBalancerName')]",
                      "location": "[parameters('networkSettings').location]",
                      "sku": {
                        "name": "[parameters('networkSettings').externalSku]"
                      },
                      "tags": {
                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                      },
                      "properties": {
                        "frontendIPConfigurations": [
                          {
                            "name": "LBFE",
                            "properties": {
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('externalLoadBalancerIpName'))]"
                              }
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "LBBE"
                          }
                        ],
                        "loadBalancingRules": [
                          {
                            "name": "es-http-external",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('externalLoadBalancerName'), 'LBFE')]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('externalLoadBalancerName'), 'LBBE')]"
                              },
                              "protocol": "Tcp",
                              "frontendPort": 9200,
                              "backendPort": 9201,
                              "enableFloatingIP": false,
                              "idleTimeoutInMinutes": 5,
                              "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('externalLoadBalancerName'), 'es-http-external-probe')]"
                              }
                            }
                          }
                        ],
                        "probes": [
                          {
                            "name": "es-http-external-probe",
                            "properties": {
                              "protocol": "Tcp",
                              "port": 9201,
                              "intervalInSeconds": 30,
                              "numberOfProbes": 3
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', variables('externalLoadBalancerIpName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "fqdn": {
                      "type": "string",
                      "value": "[format('{0}{1}:9200', variables('https'), reference(resourceId('Microsoft.Network/publicIPAddresses', variables('externalLoadBalancerIpName'))).dnsSettings.fqdn)]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(variables('loadBalancer'), 'standard-gateway')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "standard-appgw-load-balancer",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "networkSettings": {
                    "value": "[parameters('networkSettings')]"
                  },
                  "applicationGatewaySettings": {
                    "value": "[parameters('applicationGatewaySettings')]"
                  },
                  "elasticTags": {
                    "value": "[parameters('elasticTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1272.37030",
                      "templateHash": "12591339045523719843"
                    }
                  },
                  "parameters": {
                    "networkSettings": {
                      "type": "object",
                      "metadata": {
                        "description": "Network settings object"
                      }
                    },
                    "applicationGatewaySettings": {
                      "type": "object",
                      "metadata": {
                        "description": "Application Gateway settings"
                      }
                    },
                    "elasticTags": {
                      "type": "object",
                      "defaultValue": {
                        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                      },
                      "metadata": {
                        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                      }
                    }
                  },
                  "variables": {
                    "applicationGatewayName": "[format('{0}app-gateway', parameters('networkSettings').namespacePrefix)]",
                    "applicationGatewayIpName": "[format('{0}app-gateway-ip', parameters('networkSettings').namespacePrefix)]",
                    "internalLoadBalancerName": "[format('{0}internal-lb', parameters('networkSettings').namespacePrefix)]",
                    "authenticationCertsOpts": {
                      "Yes": [
                        {
                          "properties": {
                            "data": "[parameters('applicationGatewaySettings').backendCert]"
                          },
                          "name": "esHttpCert"
                        }
                      ],
                      "No": []
                    },
                    "authenticationCerts": "[variables('authenticationCertsOpts')[if(empty(parameters('applicationGatewaySettings').backendCert), 'No', 'Yes')]]",
                    "backendCertsOpts": {
                      "Yes": [
                        {
                          "id": "[resourceId('Microsoft.Network/applicationGateways/authenticationCertificates', variables('applicationGatewayName'), 'esHttpCert')]"
                        }
                      ],
                      "No": []
                    },
                    "backendCerts": "[variables('backendCertsOpts')[if(empty(parameters('applicationGatewaySettings').backendCert), 'No', 'Yes')]]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/loadBalancers",
                      "apiVersion": "2019-04-01",
                      "name": "[variables('internalLoadBalancerName')]",
                      "location": "[parameters('networkSettings').location]",
                      "sku": {
                        "name": "[parameters('networkSettings').internalSku]"
                      },
                      "tags": {
                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                      },
                      "properties": {
                        "frontendIPConfigurations": [
                          {
                            "name": "LBFE",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId(parameters('networkSettings').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('networkSettings').name, parameters('networkSettings').subnet.name)]"
                              },
                              "privateIPAddress": "[parameters('networkSettings').subnet.loadBalancerIp]",
                              "privateIPAllocationMethod": "Static"
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "LBBE"
                          }
                        ],
                        "loadBalancingRules": [
                          {
                            "name": "es-http-internal",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('internalLoadBalancerName'), 'LBFE')]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('internalLoadBalancerName'), 'LBBE')]"
                              },
                              "protocol": "Tcp",
                              "frontendPort": 9200,
                              "backendPort": 9200,
                              "enableFloatingIP": false,
                              "idleTimeoutInMinutes": 5,
                              "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('internalLoadBalancerName'), 'es-probe-internal-http')]"
                              }
                            }
                          },
                          {
                            "name": "es-transport-internal",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('internalLoadBalancerName'), 'LBFE')]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('internalLoadBalancerName'), 'LBBE')]"
                              },
                              "protocol": "Tcp",
                              "frontendPort": 9300,
                              "backendPort": 9300,
                              "enableFloatingIP": false,
                              "idleTimeoutInMinutes": 5
                            }
                          }
                        ],
                        "probes": [
                          {
                            "name": "es-probe-internal-http",
                            "properties": {
                              "protocol": "Tcp",
                              "port": 9200,
                              "intervalInSeconds": 30,
                              "numberOfProbes": 3
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2019-04-01",
                      "name": "[variables('applicationGatewayIpName')]",
                      "location": "[parameters('networkSettings').location]",
                      "tags": {
                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "Dynamic"
                      }
                    },
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2019-04-01",
                      "name": "[variables('applicationGatewayName')]",
                      "location": "[parameters('networkSettings').location]",
                      "tags": {
                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                      },
                      "properties": {
                        "sku": {
                          "name": "[parameters('applicationGatewaySettings').skuName]",
                          "tier": "[parameters('applicationGatewaySettings').tier]",
                          "capacity": "[parameters('applicationGatewaySettings').instanceCount]"
                        },
                        "sslCertificates": [
                          {
                            "name": "es-app-gateway-sslcert",
                            "properties": {
                              "data": "[parameters('applicationGatewaySettings').certBlob]",
                              "password": "[parameters('applicationGatewaySettings').certPassword]"
                            }
                          }
                        ],
                        "authenticationCertificates": "[variables('authenticationCerts')]",
                        "gatewayIPConfigurations": [
                          {
                            "name": "es-app-gateway-ip",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId(parameters('networkSettings').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('networkSettings').name, parameters('networkSettings').applicationGatewaySubnet.name)]"
                              }
                            }
                          }
                        ],
                        "frontendIPConfigurations": [
                          {
                            "name": "es-app-gateway-fip",
                            "properties": {
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('applicationGatewayIpName'))]"
                              }
                            }
                          }
                        ],
                        "frontendPorts": [
                          {
                            "name": "es-app-gateway-fport",
                            "properties": {
                              "port": 9200
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "LBBE",
                            "properties": {
                              "backendAddresses": [
                                {
                                  "ipAddress": "[parameters('networkSettings').subnet.loadBalancerIp]"
                                }
                              ]
                            }
                          }
                        ],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "es-app-gateway-httpsettings",
                            "properties": {
                              "port": 9200,
                              "protocol": "[parameters('applicationGatewaySettings').backendProtocol]",
                              "cookieBasedAffinity": "Disabled",
                              "authenticationCertificates": "[variables('backendCerts')]",
                              "probeEnabled": true,
                              "probe": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/probes', variables('applicationGatewayName'), 'es-app-gateway-probe')]"
                              },
                              "requestTimeout": 86400
                            }
                          }
                        ],
                        "httpListeners": [
                          {
                            "name": "es-app-gateway-httplistener",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('applicationGatewayName'), 'es-app-gateway-fip')]"
                              },
                              "frontendPort": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('applicationGatewayName'), 'es-app-gateway-fport')]"
                              },
                              "protocol": "Https",
                              "sslCertificate": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates', variables('applicationGatewayName'), 'es-app-gateway-sslcert')]"
                              }
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "rule1",
                            "properties": {
                              "ruleType": "Basic",
                              "httpListener": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('applicationGatewayName'), 'es-app-gateway-httplistener')]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGatewayName'), 'LBBE')]"
                              },
                              "backendHttpSettings": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('applicationGatewayName'), 'es-app-gateway-httpsettings')]"
                              }
                            }
                          }
                        ],
                        "probes": [
                          {
                            "name": "es-app-gateway-probe",
                            "properties": {
                              "protocol": "[parameters('applicationGatewaySettings').backendProtocol]",
                              "path": "/",
                              "host": "127.0.0.1",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "match": {
                                "statusCodes": [
                                  "200-399",
                                  "401"
                                ],
                                "body": ""
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', variables('applicationGatewayIpName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "fqdn": {
                      "type": "string",
                      "value": "N/A"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(variables('loadBalancer'), 'waf-gateway')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "waf-appgw-load-balancer",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "networkSettings": {
                    "value": "[parameters('networkSettings')]"
                  },
                  "applicationGatewaySettings": {
                    "value": "[parameters('applicationGatewaySettings')]"
                  },
                  "elasticTags": {
                    "value": "[parameters('elasticTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1272.37030",
                      "templateHash": "9044561681697257426"
                    }
                  },
                  "parameters": {
                    "networkSettings": {
                      "type": "object",
                      "metadata": {
                        "description": "Network settings object"
                      }
                    },
                    "applicationGatewaySettings": {
                      "type": "object",
                      "metadata": {
                        "description": "Application Gateway settings"
                      }
                    },
                    "elasticTags": {
                      "type": "object",
                      "defaultValue": {
                        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                      },
                      "metadata": {
                        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                      }
                    }
                  },
                  "variables": {
                    "applicationGatewayName": "[format('{0}app-gateway', parameters('networkSettings').namespacePrefix)]",
                    "applicationGatewayIpName": "[format('{0}app-gateway-ip', parameters('networkSettings').namespacePrefix)]",
                    "internalLoadBalancerName": "[format('{0}internal-lb', parameters('networkSettings').namespacePrefix)]",
                    "authenticationCertsOpts": {
                      "Yes": [
                        {
                          "properties": {
                            "data": "[parameters('applicationGatewaySettings').backendCert]"
                          },
                          "name": "esHttpCert"
                        }
                      ],
                      "No": []
                    },
                    "authenticationCerts": "[variables('authenticationCertsOpts')[if(empty(parameters('applicationGatewaySettings').backendCert), 'No', 'Yes')]]",
                    "backendCertsOpts": {
                      "Yes": [
                        {
                          "id": "[resourceId('Microsoft.Network/applicationGateways/authenticationCertificates', variables('applicationGatewayName'), 'esHttpCert')]"
                        }
                      ],
                      "No": []
                    },
                    "backendCerts": "[variables('backendCertsOpts')[if(empty(parameters('applicationGatewaySettings').backendCert), 'No', 'Yes')]]",
                    "wafEnabledOpts": {
                      "Enabled": true,
                      "Disabled": false
                    },
                    "wafEnabled": "[variables('wafEnabledOpts')[parameters('applicationGatewaySettings').firewallStatus]]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/loadBalancers",
                      "apiVersion": "2019-04-01",
                      "name": "[variables('internalLoadBalancerName')]",
                      "location": "[parameters('networkSettings').location]",
                      "sku": {
                        "name": "[parameters('networkSettings').internalSku]"
                      },
                      "tags": {
                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                      },
                      "properties": {
                        "frontendIPConfigurations": [
                          {
                            "name": "LBFE",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId(parameters('networkSettings').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('networkSettings').name, parameters('networkSettings').subnet.name)]"
                              },
                              "privateIPAddress": "[parameters('networkSettings').subnet.loadBalancerIp]",
                              "privateIPAllocationMethod": "Static"
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "LBBE"
                          }
                        ],
                        "loadBalancingRules": [
                          {
                            "name": "es-http-internal",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('internalLoadBalancerName'), 'LBFE')]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('internalLoadBalancerName'), 'LBBE')]"
                              },
                              "protocol": "Tcp",
                              "frontendPort": 9200,
                              "backendPort": 9200,
                              "enableFloatingIP": false,
                              "idleTimeoutInMinutes": 5,
                              "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('internalLoadBalancerName'), 'es-probe-internal-http')]"
                              }
                            }
                          },
                          {
                            "name": "es-transport-internal",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('internalLoadBalancerName'), 'LBFE')]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('internalLoadBalancerName'), 'LBBE')]"
                              },
                              "protocol": "Tcp",
                              "frontendPort": 9300,
                              "backendPort": 9300,
                              "enableFloatingIP": false,
                              "idleTimeoutInMinutes": 5
                            }
                          }
                        ],
                        "probes": [
                          {
                            "name": "es-probe-internal-http",
                            "properties": {
                              "protocol": "Tcp",
                              "port": 9200,
                              "intervalInSeconds": 30,
                              "numberOfProbes": 3
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2019-04-01",
                      "name": "[variables('applicationGatewayIpName')]",
                      "location": "[parameters('networkSettings').location]",
                      "tags": {
                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "Dynamic"
                      }
                    },
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2019-04-01",
                      "name": "[variables('applicationGatewayName')]",
                      "location": "[parameters('networkSettings').location]",
                      "tags": {
                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                      },
                      "properties": {
                        "sku": {
                          "name": "[parameters('applicationGatewaySettings').skuName]",
                          "tier": "[parameters('applicationGatewaySettings').tier]",
                          "capacity": "[parameters('applicationGatewaySettings').instanceCount]"
                        },
                        "sslCertificates": [
                          {
                            "name": "es-app-gateway-sslcert",
                            "properties": {
                              "data": "[parameters('applicationGatewaySettings').certBlob]",
                              "password": "[parameters('applicationGatewaySettings').certPassword]"
                            }
                          }
                        ],
                        "authenticationCertificates": "[variables('authenticationCerts')]",
                        "gatewayIPConfigurations": [
                          {
                            "name": "es-app-gateway-ip",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId(parameters('networkSettings').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('networkSettings').name, parameters('networkSettings').applicationGatewaySubnet.name)]"
                              }
                            }
                          }
                        ],
                        "frontendIPConfigurations": [
                          {
                            "name": "es-app-gateway-fip",
                            "properties": {
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('applicationGatewayIpName'))]"
                              }
                            }
                          }
                        ],
                        "frontendPorts": [
                          {
                            "name": "es-app-gateway-fport",
                            "properties": {
                              "port": 9200
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "LBBE",
                            "properties": {
                              "backendAddresses": [
                                {
                                  "ipAddress": "[parameters('networkSettings').subnet.loadBalancerIp]"
                                }
                              ]
                            }
                          }
                        ],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "es-app-gateway-httpsettings",
                            "properties": {
                              "port": 9200,
                              "protocol": "[parameters('applicationGatewaySettings').backendProtocol]",
                              "cookieBasedAffinity": "Disabled",
                              "authenticationCertificates": "[variables('backendCerts')]",
                              "probeEnabled": true,
                              "probe": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/probes', variables('applicationGatewayName'), 'es-app-gateway-probe')]"
                              },
                              "requestTimeout": 86400
                            }
                          }
                        ],
                        "httpListeners": [
                          {
                            "name": "es-app-gateway-httplistener",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('applicationGatewayName'), 'es-app-gateway-fip')]"
                              },
                              "frontendPort": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('applicationGatewayName'), 'es-app-gateway-fport')]"
                              },
                              "protocol": "Https",
                              "sslCertificate": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates', variables('applicationGatewayName'), 'es-app-gateway-sslcert')]"
                              }
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "rule1",
                            "properties": {
                              "ruleType": "Basic",
                              "httpListener": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('applicationGatewayName'), 'es-app-gateway-httplistener')]"
                              },
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGatewayName'), 'LBBE')]"
                              },
                              "backendHttpSettings": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('applicationGatewayName'), 'es-app-gateway-httpsettings')]"
                              }
                            }
                          }
                        ],
                        "webApplicationFirewallConfiguration": {
                          "ruleSetType": "OWASP",
                          "ruleSetVersion": "3.0",
                          "enabled": "[variables('wafEnabled')]",
                          "firewallMode": "[parameters('applicationGatewaySettings').firewallMode]"
                        },
                        "probes": [
                          {
                            "name": "es-app-gateway-probe",
                            "properties": {
                              "protocol": "[parameters('applicationGatewaySettings').backendProtocol]",
                              "path": "/",
                              "host": "127.0.0.1",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "match": {
                                "statusCodes": [
                                  "200-399",
                                  "401"
                                ],
                                "body": ""
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', variables('applicationGatewayIpName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "fqdn": {
                      "type": "string",
                      "value": "N/A"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "fqdn": {
              "type": "string",
              "value": "[if(equals(variables('loadBalancer'), 'internal'), reference(resourceId('Microsoft.Resources/deployments', 'internal-load-balancer')).outputs.fqdn.value, if(equals(variables('loadBalancer'), 'external'), reference(resourceId('Microsoft.Resources/deployments', 'external-load-balancer')).outputs.fqdn.value, if(equals(variables('loadBalancer'), 'standard-gateway'), reference(resourceId('Microsoft.Resources/deployments', 'standard-appgw-load-balancer')).outputs.fqdn.value, reference(resourceId('Microsoft.Resources/deployments', 'waf-appgw-load-balancer')).outputs.fqdn.value)))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'network')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "ubuntu-settings",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "esSettings": {
            "value": "[variables('esSettings')]"
          },
          "elasticTags": {
            "value": "[parameters('elasticTags')]"
          },
          "commonVmSettings": {
            "value": "[variables('commonVmSettings')]"
          },
          "topologySettings": {
            "value": "[variables('topologySettings')]"
          },
          "networkSettings": {
            "value": "[variables('networkSettings')]"
          },
          "azureCloudStorageAccount": {
            "value": {
              "name": "[variables('azureCloudStorageAccount').name]",
              "resourceGroup": "[variables('azureCloudStorageAccount').resourceGroup]",
              "install": "[variables('azureCloudStorageAccount').install]",
              "key": "[if(not(empty(variables('existingStorageAccountResourceId'))), listKeys(variables('existingStorageAccountResourceId'), '2019-04-01').keys[0].value, '')]",
              "suffix": "[reference(resourceId('Microsoft.Resources/deployments', 'shared')).outputs.existingStorageAccountSuffix.value]"
            }
          },
          "kibanaIp": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'kibana-ip')).outputs.fqdn.value]"
          },
          "sharedStorageAccount": {
            "value": {
              "name": "[variables('commonVmSettings').storageAccountName]",
              "key": "[listKeys(variables('sharedStorageAccountResourceId'), '2019-04-01').keys[0].value]",
              "suffix": "[reference(resourceId('Microsoft.Resources/deployments', 'shared')).outputs.sharedStorageAccountSuffix.value]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1272.37030",
              "templateHash": "10163816936936078687"
            }
          },
          "parameters": {
            "_artifactsLocation": {
              "type": "string",
              "metadata": {
                "description": "The base URI where artifacts required by this template are located including a trailing '/'"
              }
            },
            "_artifactsLocationSasToken": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
              }
            },
            "esSettings": {
              "type": "object",
              "metadata": {
                "description": "The Elasticsearch settings"
              }
            },
            "elasticTags": {
              "type": "object",
              "metadata": {
                "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
              }
            },
            "commonVmSettings": {
              "type": "object",
              "metadata": {
                "description": "Shared VM settings"
              }
            },
            "topologySettings": {
              "type": "object",
              "metadata": {
                "description": "Aggregate for topology variable"
              }
            },
            "networkSettings": {
              "type": "object",
              "metadata": {
                "description": "Network settings"
              }
            },
            "azureCloudStorageAccount": {
              "type": "secureObject",
              "metadata": {
                "description": "The storage settings for the Azure Cloud plugin"
              }
            },
            "kibanaIp": {
              "type": "string",
              "metadata": {
                "description": "The public IP address for Kibana"
              }
            },
            "sharedStorageAccount": {
              "type": "secureObject",
              "metadata": {
                "description": "The shared storage settings"
              }
            }
          },
          "variables": {
            "quote": "'",
            "doublequote": "\"",
            "backslash": "\\",
            "escapedQuote": "[format('{0}{1}{2}{3}{4}', variables('quote'), variables('doublequote'), variables('quote'), variables('doublequote'), variables('quote'))]",
            "namespacePrefix": "[parameters('topologySettings').vmHostNamePrefix]",
            "kibanaDomainName": "[if(not(empty(parameters('esSettings').samlMetadataUri)), if(not(empty(parameters('esSettings').samlServiceProviderUri)), parameters('esSettings').samlServiceProviderUri, parameters('kibanaIp')), '')]",
            "loadBalancerIp": "[format('{0}://{1}:9200', if(equals(parameters('networkSettings').https, 'Yes'), 'https', 'http'), parameters('topologySettings').vNetLoadBalancerIp)]",
            "dataNodeShortOpts": {
              "No": "z",
              "Yes": ""
            },
            "dataNodeShortOpt": "[variables('dataNodeShortOpts')[parameters('topologySettings').dataNodesAreMasterEligible]]",
            "dedicatedMasterNodesShortOpts": {
              "No": "d",
              "Yes": ""
            },
            "dedicatedMasterNodesShortOpt": "[variables('dedicatedMasterNodesShortOpts')[parameters('topologySettings').dataNodesAreMasterEligible]]",
            "installAzureCloudPluginShortOpts": {
              "No": "",
              "Yes": "j"
            },
            "installAzureCloudPluginShortOpt": "[variables('installAzureCloudPluginShortOpts')[parameters('azureCloudStorageAccount').install]]",
            "azureCloudStorageName": "[if(equals(parameters('azureCloudStorageAccount').install, 'Yes'), if(empty(parameters('azureCloudStorageAccount').name), parameters('sharedStorageAccount').name, parameters('azureCloudStorageAccount').name), '')]",
            "azureCloudStorageKey": "[if(equals(parameters('azureCloudStorageAccount').install, 'Yes'), if(empty(parameters('azureCloudStorageAccount').key), parameters('sharedStorageAccount').key, parameters('azureCloudStorageAccount').key), '')]",
            "azureCloudStorageSuffix": "[if(equals(parameters('azureCloudStorageAccount').install, 'Yes'), if(empty(parameters('azureCloudStorageAccount').name), parameters('sharedStorageAccount').suffix, parameters('azureCloudStorageAccount').suffix), '')]",
            "installPluginsShortOpts": {
              "No": "",
              "Yes": "l"
            },
            "installPluginsShortOpt": "[variables('installPluginsShortOpts')[parameters('esSettings').installPlugins]]",
            "commonShortOpts": "[format('{0}{1}{2}n ', variables('dedicatedMasterNodesShortOpt'), variables('installPluginsShortOpt'), variables('installAzureCloudPluginShortOpt'))]",
            "commonInstallParams": "[format('{0}{1}{2} -v {3}{4}{5} -m {6} -A {7}{8}{9} -R {10}{11}{12} -K {13}{14}{15} -S {16}{17}{18} -F {19}{20}{21} -M {22}{23}{24} -B {25}{26}{27} -Z {28} -p {29}{30}{31} -a {32}{33}{34} -k {35}{36}{37} -E {38}{39}{40} -L {41}{42}{43} -C {44}{45}{46} -D {47}{48}{49} -H {50}{51}{52} -G {53}{54}{55} -V {56}{57}{58} -J {59}{60}{61} -T {62}{63}{64} -W {65}{66}{67} -N {68}{69}{70} -O {71}{72}{73} -P {74}{75}{76}', variables('quote'), parameters('esSettings').clusterName, variables('quote'), variables('quote'), parameters('esSettings').version, variables('quote'), parameters('esSettings').heapSize, variables('quote'), replace(parameters('esSettings').securityAdminPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').securityRemoteMonitoringPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').securityKibanaPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').securityLogstashPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').securityBeatsPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').securityApmPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').securityBootstrapPwd, variables('quote'), variables('escapedQuote')), variables('quote'), parameters('topologySettings').vmDataNodeCount, variables('quote'), variables('namespacePrefix'), variables('quote'), variables('quote'), variables('azureCloudStorageName'), variables('quote'), variables('quote'), variables('azureCloudStorageKey'), variables('quote'), variables('quote'), variables('azureCloudStorageSuffix'), variables('quote'), variables('quote'), parameters('esSettings').installAdditionalPlugins, variables('quote'), variables('quote'), replace(replace(parameters('esSettings').yamlConfiguration, variables('quote'), variables('escapedQuote')), format('{0}{1}', variables('backslash'), variables('doublequote')), variables('doublequote')), variables('quote'), variables('quote'), parameters('topologySettings').vNetLoadBalancerIp, variables('quote'), variables('quote'), parameters('esSettings').httpCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').httpCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('esSettings').httpCaCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').httpCaCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('esSettings').transportCaCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').transportCaCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').transportCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('esSettings').samlMetadataUri, variables('quote'), variables('quote'), variables('kibanaDomainName'), variables('quote'))]",
            "ubuntuScripts": [
              "[uri(parameters('_artifactsLocation'), format('scripts/elasticsearch-install.sh{0}', parameters('_artifactsLocationSasToken')))]",
              "[uri(parameters('_artifactsLocation'), format('scripts/kibana-install.sh{0}', parameters('_artifactsLocationSasToken')))]",
              "[uri(parameters('_artifactsLocation'), format('scripts/logstash-install.sh{0}', parameters('_artifactsLocationSasToken')))]",
              "[uri(parameters('_artifactsLocation'), format('scripts/vm-disk-utils-0.1.sh{0}', parameters('_artifactsLocationSasToken')))]",
              "[uri(parameters('_artifactsLocation'), format('scripts/java-install.sh{0}', parameters('_artifactsLocationSasToken')))]"
            ],
            "ubuntuSettings": {
              "imageReference": {
                "publisher": "Canonical",
                "offer": "UbuntuServer",
                "sku": "16.04.0-LTS",
                "version": "latest"
              },
              "managementPort": 22,
              "extensionSettings": {
                "master": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": "[variables('ubuntuScripts')]"
                  },
                  "protectedSettings": {
                    "commandToExecute": "[format('bash elasticsearch-install.sh -x{0}{1}', variables('commonShortOpts'), variables('commonInstallParams'))]"
                  }
                },
                "client": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": "[variables('ubuntuScripts')]"
                  },
                  "protectedSettings": {
                    "commandToExecute": "[format('bash elasticsearch-install.sh -y{0}{1}', variables('commonShortOpts'), variables('commonInstallParams'))]"
                  }
                },
                "data": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": "[variables('ubuntuScripts')]"
                  },
                  "protectedSettings": {
                    "commandToExecute": "[format('bash elasticsearch-install.sh -{0}{1}{2}', variables('dataNodeShortOpt'), variables('commonShortOpts'), variables('commonInstallParams'))]"
                  }
                },
                "kibana": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": "[variables('ubuntuScripts')]"
                  },
                  "protectedSettings": {
                    "commandToExecute": "[format('bash kibana-install.sh -{0}n {1}{2}{3} -v {4}{5}{6} -u {7}{8}{9} -S {10}{11}{12} -C {13}{14}{15} -K {16}{17}{18} -P {19}{20}{21} -Y {22}{23}{24} -H {25}{26}{27} -G {28}{29}{30} -V {31}{32}{33} -J {34}{35}{36} -U {37}{38}{39}', variables('installPluginsShortOpt'), variables('quote'), parameters('esSettings').clusterName, variables('quote'), variables('quote'), parameters('esSettings').version, variables('quote'), variables('quote'), variables('loadBalancerIp'), variables('quote'), variables('quote'), replace(parameters('esSettings').securityKibanaPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('topologySettings').kibanaCertBlob, variables('quote'), variables('quote'), parameters('topologySettings').kibanaKeyBlob, variables('quote'), variables('quote'), replace(parameters('topologySettings').kibanaKeyPassphrase, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(replace(parameters('topologySettings').kibanaYaml, variables('quote'), variables('escapedQuote')), format('{0}{1}', variables('backslash'), variables('doublequote')), variables('doublequote')), variables('quote'), variables('quote'), parameters('esSettings').httpCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').httpCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('esSettings').httpCaCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').httpCaCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), variables('kibanaDomainName'), variables('quote'))]"
                  }
                },
                "logstash": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": "[variables('ubuntuScripts')]"
                  },
                  "protectedSettings": {
                    "commandToExecute": "[format('bash logstash-install.sh -{0}v {1}{2}{3} -m {4} -u {5}{6}{7} -S {8}{9}{10} -L {11}{12}{13} -c {14}{15}{16} -K {17}{18}{19} -Y {20}{21}{22} -H {23}{24}{25} -G {26}{27}{28} -V {29}{30}{31} -J {32}{33}{34}', variables('installPluginsShortOpt'), variables('quote'), parameters('esSettings').version, variables('quote'), parameters('topologySettings').logstashHeapSize, variables('quote'), variables('loadBalancerIp'), variables('quote'), variables('quote'), replace(parameters('esSettings').securityLogstashPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('topologySettings').logstashPlugins, variables('quote'), variables('quote'), parameters('topologySettings').logstashConf, variables('quote'), variables('quote'), replace(parameters('topologySettings').logstashKeystorePwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(replace(parameters('topologySettings').logstashYaml, variables('quote'), variables('escapedQuote')), format('{0}{1}', variables('backslash'), variables('doublequote')), variables('doublequote')), variables('quote'), variables('quote'), parameters('esSettings').httpCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').httpCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('esSettings').httpCaCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').httpCaCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'))]"
                  }
                }
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "elasticsearch-nodes",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "osSettings": {
                    "value": "[variables('ubuntuSettings')]"
                  },
                  "commonVmSettings": {
                    "value": "[parameters('commonVmSettings')]"
                  },
                  "topologySettings": {
                    "value": "[parameters('topologySettings')]"
                  },
                  "networkSettings": {
                    "value": "[parameters('networkSettings')]"
                  },
                  "elasticTags": {
                    "value": "[parameters('elasticTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1272.37030",
                      "templateHash": "8542739184961947173"
                    }
                  },
                  "parameters": {
                    "osSettings": {
                      "type": "object",
                      "metadata": {
                        "description": "Operating system settings"
                      }
                    },
                    "commonVmSettings": {
                      "type": "object",
                      "metadata": {
                        "description": "Shared VM settings"
                      }
                    },
                    "topologySettings": {
                      "type": "object",
                      "metadata": {
                        "description": "Aggregate for topology variable"
                      }
                    },
                    "networkSettings": {
                      "type": "object",
                      "metadata": {
                        "description": "Network settings"
                      }
                    },
                    "elasticTags": {
                      "type": "object",
                      "defaultValue": {
                        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                      },
                      "metadata": {
                        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                      }
                    }
                  },
                  "variables": {
                    "locations": {
                      "eastus": {
                        "platformFaultDomainCount": 3
                      },
                      "eastus2": {
                        "platformFaultDomainCount": 3
                      },
                      "centralus": {
                        "platformFaultDomainCount": 3
                      },
                      "northcentralus": {
                        "platformFaultDomainCount": 3
                      },
                      "southcentralus": {
                        "platformFaultDomainCount": 3
                      },
                      "westus": {
                        "platformFaultDomainCount": 3
                      },
                      "canadacentral": {
                        "platformFaultDomainCount": 3
                      },
                      "northeurope": {
                        "platformFaultDomainCount": 3
                      },
                      "westeurope": {
                        "platformFaultDomainCount": 3
                      }
                    },
                    "normalizedLocation": "[replace(toLower(parameters('commonVmSettings').location), ' ', '')]",
                    "platformFaultDomainCount": "[if(contains(variables('locations'), variables('normalizedLocation')), variables('locations')[variables('normalizedLocation')].platformFaultDomainCount, 2)]",
                    "vmAcceleratedNetworking": [
                      "Standard_D2_v2",
                      "Standard_D3_v2",
                      "Standard_D4_v2",
                      "Standard_D5_v2",
                      "Standard_D11_v2",
                      "Standard_D12_v2",
                      "Standard_D13_v2",
                      "Standard_D14_v2",
                      "Standard_D15_v2",
                      "Standard_DS2_v2",
                      "Standard_DS3_v2",
                      "Standard_DS4_v2",
                      "Standard_DS5_v2",
                      "Standard_DS11_v2",
                      "Standard_DS12_v2",
                      "Standard_DS13_v2",
                      "Standard_DS14_v2",
                      "Standard_DS15_v2",
                      "Standard_F2",
                      "Standard_F4",
                      "Standard_F8",
                      "Standard_F16",
                      "Standard_F2s",
                      "Standard_F4s",
                      "Standard_F8s",
                      "Standard_F16s",
                      "Standard_D4_v3",
                      "Standard_D8_v3",
                      "Standard_D16_v3",
                      "Standard_D32_v3",
                      "Standard_D64_v3",
                      "Standard_D4s_v3",
                      "Standard_D8s_v3",
                      "Standard_D16s_v3",
                      "Standard_D32s_v3",
                      "Standard_D64s_v3",
                      "Standard_E4_v3",
                      "Standard_E8_v3",
                      "Standard_E16_v3",
                      "Standard_E32_v3",
                      "Standard_E64_v3",
                      "Standard_E64i_v3",
                      "Standard_E4s_v3",
                      "Standard_E8s_v3",
                      "Standard_E16s_v3",
                      "Standard_E32s_v3",
                      "Standard_E64s_v3",
                      "Standard_E64is_v3",
                      "Standard_F4s_v2",
                      "Standard_F8s_v2",
                      "Standard_F16s_v2",
                      "Standard_F32s_v2",
                      "Standard_F64s_v2",
                      "Standard_F72s_v2",
                      "Standard_M8ms",
                      "Standard_M16ms",
                      "Standard_M32ts",
                      "Standard_M32ls",
                      "Standard_M32ms",
                      "Standard_M64s",
                      "Standard_M64ls",
                      "Standard_M64ms",
                      "Standard_M128s",
                      "Standard_M128ms",
                      "Standard_M64",
                      "Standard_M64m",
                      "Standard_M128",
                      "Standard_M128m"
                    ],
                    "networkSecurityGroupName": "[format('{0}standard-lb-nsg', parameters('commonVmSettings').namespacePrefix)]",
                    "standardInternalLoadBalancer": "[equals(parameters('networkSettings').internalSku, 'Standard')]",
                    "standardExternalLoadBalancer": "[equals(parameters('networkSettings').externalSku, 'Standard')]",
                    "standardInternalOrExternalLoadBalancer": "[or(variables('standardInternalLoadBalancer'), variables('standardExternalLoadBalancer'))]"
                  },
                  "resources": [
                    {
                      "condition": "[equals(parameters('topologySettings').dataNodesAreMasterEligible, 'No')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "master-nodes",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vm": {
                            "value": {
                              "shared": "[parameters('commonVmSettings')]",
                              "namespace": "[format('{0}master-', parameters('commonVmSettings').namespacePrefix)]",
                              "installScript": "[parameters('osSettings').extensionSettings.master]",
                              "size": "[parameters('topologySettings').vmSizeMasterNodes]",
                              "storageAccountType": "Standard_LRS",
                              "count": 3,
                              "backendPools": [],
                              "imageReference": "[parameters('osSettings').imageReference]",
                              "platformFaultDomainCount": "[variables('platformFaultDomainCount')]",
                              "acceleratedNetworking": "[if(equals(parameters('topologySettings').vmMasterNodeAcceleratedNetworking, 'Default'), if(contains(variables('vmAcceleratedNetworking'), parameters('topologySettings').vmSizeMasterNodes), 'Yes', 'No'), parameters('topologySettings').vmMasterNodeAcceleratedNetworking)]",
                              "nsg": "",
                              "standardInternalLoadBalancer": false
                            }
                          },
                          "elasticTags": {
                            "value": "[parameters('elasticTags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1272.37030",
                              "templateHash": "12350110167214581172"
                            }
                          },
                          "parameters": {
                            "vm": {
                              "type": "object",
                              "metadata": {
                                "description": "vm configuration"
                              }
                            },
                            "elasticTags": {
                              "type": "object",
                              "defaultValue": {
                                "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                              },
                              "metadata": {
                                "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                              }
                            }
                          },
                          "variables": {
                            "namespace": "[parameters('vm').namespace]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/availabilitySets",
                              "apiVersion": "2019-03-01",
                              "name": "[format('{0}av-set', variables('namespace'))]",
                              "location": "[parameters('vm').shared.location]",
                              "tags": {
                                "provider": "[toUpper(parameters('elasticTags').provider)]"
                              },
                              "properties": {
                                "platformUpdateDomainCount": 3,
                                "platformFaultDomainCount": "[parameters('vm').platformFaultDomainCount]"
                              },
                              "sku": {
                                "name": "Aligned"
                              }
                            },
                            {
                              "copy": {
                                "name": "virtualMachine",
                                "count": "[length(range(0, parameters('vm').count))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}{1}-vm-creation', variables('namespace'), range(0, parameters('vm').count)[copyIndex()])]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "vm": {
                                    "value": "[parameters('vm')]"
                                  },
                                  "availabilitySet": {
                                    "value": "[format('{0}av-set', variables('namespace'))]"
                                  },
                                  "index": {
                                    "value": "[range(0, parameters('vm').count)[copyIndex()]]"
                                  },
                                  "elasticTags": {
                                    "value": "[parameters('elasticTags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1272.37030",
                                      "templateHash": "9194726631229920325"
                                    }
                                  },
                                  "parameters": {
                                    "vm": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "vm configuration"
                                      }
                                    },
                                    "index": {
                                      "type": "int",
                                      "metadata": {
                                        "description": "the outer loop index"
                                      }
                                    },
                                    "availabilitySet": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the availability set"
                                      }
                                    },
                                    "dataDisks": {
                                      "type": "object",
                                      "defaultValue": {
                                        "disks": []
                                      },
                                      "metadata": {
                                        "description": "additional data disks to attach"
                                      }
                                    },
                                    "elasticTags": {
                                      "type": "object",
                                      "defaultValue": {
                                        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                                      },
                                      "metadata": {
                                        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "vmName": "[format('{0}{1}', parameters('vm').namespace, parameters('index'))]",
                                    "password_osProfile": {
                                      "computername": "[variables('vmName')]",
                                      "adminUsername": "[parameters('vm').shared.credentials.adminUsername]",
                                      "adminPassword": "[parameters('vm').shared.credentials.password]"
                                    },
                                    "sshPublicKey_osProfile": {
                                      "computername": "[variables('vmName')]",
                                      "adminUsername": "[parameters('vm').shared.credentials.adminUsername]",
                                      "linuxConfiguration": {
                                        "disablePasswordAuthentication": "true",
                                        "ssh": {
                                          "publicKeys": [
                                            {
                                              "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('vm').shared.credentials.adminUsername)]",
                                              "keyData": "[parameters('vm').shared.credentials.sshPublicKey]"
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "publicIpName": "[format('{0}-ip', variables('vmName'))]",
                                    "nsgIpConfigs": [
                                      {},
                                      {
                                        "networkSecurityGroup": {
                                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vm').nsg)]"
                                        }
                                      },
                                      {
                                        "networkSecurityGroup": {
                                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vm').nsg)]"
                                        },
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "primary": true,
                                              "privateIPAllocationMethod": "Dynamic",
                                              "subnet": {
                                                "id": "[parameters('vm').shared.subnetId]"
                                              },
                                              "loadBalancerBackendAddressPools": "[parameters('vm').backendPools]",
                                              "publicIPAddress": {
                                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ],
                                    "nsgIpConfig": "[variables('nsgIpConfigs')[if(empty(parameters('vm').nsg), 0, if(parameters('vm').standardInternalLoadBalancer, 2, 1))]]",
                                    "nicProperties": {
                                      "primary": true,
                                      "enableAcceleratedNetworking": "[equals(parameters('vm').acceleratedNetworking, 'Yes')]",
                                      "ipConfigurations": [
                                        {
                                          "name": "ipconfig1",
                                          "properties": {
                                            "privateIPAllocationMethod": "Dynamic",
                                            "subnet": {
                                              "id": "[parameters('vm').shared.subnetId]"
                                            },
                                            "loadBalancerBackendAddressPools": "[parameters('vm').backendPools]"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[and(not(empty(parameters('vm').nsg)), parameters('vm').standardInternalLoadBalancer)]",
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2019-04-01",
                                      "name": "[variables('publicIpName')]",
                                      "location": "[parameters('vm').shared.location]",
                                      "sku": {
                                        "name": "Standard"
                                      },
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": {
                                        "publicIPAllocationMethod": "Static",
                                        "dnsSettings": {
                                          "domainNameLabel": "[format('{0}{1}', variables('vmName'), uniqueString(resourceGroup().id, deployment().name))]"
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2019-04-01",
                                      "name": "[format('{0}-nic', variables('vmName'))]",
                                      "location": "[parameters('vm').shared.location]",
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": "[union(variables('nicProperties'), variables('nsgIpConfig'))]",
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2019-03-01",
                                      "name": "[variables('vmName')]",
                                      "location": "[parameters('vm').shared.location]",
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": {
                                        "availabilitySet": {
                                          "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySet'))]"
                                        },
                                        "hardwareProfile": {
                                          "vmSize": "[parameters('vm').size]"
                                        },
                                        "osProfile": "[if(equals(parameters('vm').shared.credentials.authenticationType, 'password'), variables('password_osProfile'), variables('sshPublicKey_osProfile'))]",
                                        "storageProfile": {
                                          "imageReference": "[parameters('vm').imageReference]",
                                          "osDisk": {
                                            "name": "[format('{0}-osdisk', variables('vmName'))]",
                                            "managedDisk": {
                                              "storageAccountType": "[parameters('vm').storageAccountType]"
                                            },
                                            "caching": "ReadWrite",
                                            "createOption": "FromImage"
                                          },
                                          "dataDisks": "[parameters('dataDisks').disks]"
                                        },
                                        "networkProfile": {
                                          "networkInterfaces": [
                                            {
                                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('vmName')))]"
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('vmName')))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2019-03-01",
                                      "name": "[format('{0}/script', variables('vmName'))]",
                                      "location": "[parameters('vm').shared.location]",
                                      "properties": "[parameters('vm').installScript]",
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/availabilitySets', format('{0}av-set', variables('namespace')))]"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "network-security-group",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "resourceGroupLocation": {
                            "value": "[parameters('commonVmSettings').location]"
                          },
                          "nsgName": {
                            "value": "[variables('networkSecurityGroupName')]"
                          },
                          "elasticTags": {
                            "value": "[parameters('elasticTags')]"
                          },
                          "standardInternalOrExternalLoadBalancer": {
                            "value": "[variables('standardInternalOrExternalLoadBalancer')]"
                          },
                          "standardExternalLoadBalancer": {
                            "value": "[variables('standardExternalLoadBalancer')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1272.37030",
                              "templateHash": "6549720521694104035"
                            }
                          },
                          "parameters": {
                            "resourceGroupLocation": {
                              "type": "string"
                            },
                            "nsgName": {
                              "type": "string"
                            },
                            "elasticTags": {
                              "type": "object"
                            },
                            "standardInternalOrExternalLoadBalancer": {
                              "type": "bool"
                            },
                            "standardExternalLoadBalancer": {
                              "type": "bool"
                            }
                          },
                          "variables": {
                            "vmNsgProperties": [
                              {},
                              {
                                "securityRules": [
                                  {
                                    "name": "External",
                                    "properties": {
                                      "description": "Allows inbound traffic from Standard External LB",
                                      "protocol": "Tcp",
                                      "sourcePortRange": "*",
                                      "destinationPortRange": "9201",
                                      "sourceAddressPrefix": "*",
                                      "destinationAddressPrefix": "*",
                                      "access": "Allow",
                                      "priority": 100,
                                      "direction": "Inbound"
                                    }
                                  }
                                ]
                              }
                            ]
                          },
                          "resources": [
                            {
                              "condition": "[parameters('standardInternalOrExternalLoadBalancer')]",
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2019-04-01",
                              "name": "[parameters('nsgName')]",
                              "location": "[parameters('resourceGroupLocation')]",
                              "tags": {
                                "provider": "[toUpper(parameters('elasticTags').provider)]"
                              },
                              "properties": "[variables('vmNsgProperties')[if(parameters('standardExternalLoadBalancer'), 1, 0)]]"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "condition": "[greater(parameters('topologySettings').vmClientNodeCount, 0)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "client-nodes",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vm": {
                            "value": {
                              "shared": "[parameters('commonVmSettings')]",
                              "namespace": "[format('{0}client-', parameters('commonVmSettings').namespacePrefix)]",
                              "installScript": "[parameters('osSettings').extensionSettings.client]",
                              "size": "[parameters('topologySettings').vmSizeClientNodes]",
                              "count": "[parameters('topologySettings').vmClientNodeCount]",
                              "storageAccountType": "Standard_LRS",
                              "backendPools": "[parameters('topologySettings').loadBalancerBackEndPools]",
                              "imageReference": "[parameters('osSettings').imageReference]",
                              "platformFaultDomainCount": "[variables('platformFaultDomainCount')]",
                              "acceleratedNetworking": "[if(equals(parameters('topologySettings').vmClientNodeAcceleratedNetworking, 'Default'), if(contains(variables('vmAcceleratedNetworking'), parameters('topologySettings').vmSizeClientNodes), 'Yes', 'No'), parameters('topologySettings').vmClientNodeAcceleratedNetworking)]",
                              "nsg": "[if(variables('standardInternalOrExternalLoadBalancer'), variables('networkSecurityGroupName'), '')]",
                              "standardInternalLoadBalancer": "[variables('standardInternalLoadBalancer')]"
                            }
                          },
                          "elasticTags": {
                            "value": "[parameters('elasticTags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1272.37030",
                              "templateHash": "12111328062697985937"
                            }
                          },
                          "parameters": {
                            "vm": {
                              "type": "object",
                              "metadata": {
                                "description": "vm configuration"
                              }
                            },
                            "elasticTags": {
                              "type": "object",
                              "defaultValue": {
                                "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                              },
                              "metadata": {
                                "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                              }
                            }
                          },
                          "variables": {
                            "namespace": "[parameters('vm').namespace]",
                            "availabilitySetName": "[format('{0}av-set', variables('namespace'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/availabilitySets",
                              "apiVersion": "2019-03-01",
                              "name": "[variables('availabilitySetName')]",
                              "location": "[parameters('vm').shared.location]",
                              "tags": {
                                "provider": "[toUpper(parameters('elasticTags').provider)]"
                              },
                              "properties": {
                                "platformUpdateDomainCount": 20,
                                "platformFaultDomainCount": "[parameters('vm').platformFaultDomainCount]"
                              },
                              "sku": {
                                "name": "Aligned"
                              }
                            },
                            {
                              "copy": {
                                "name": "virtualMachine",
                                "count": "[length(range(0, parameters('vm').count))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}{1}-vm-creation', variables('namespace'), range(0, parameters('vm').count)[copyIndex()])]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "vm": {
                                    "value": "[parameters('vm')]"
                                  },
                                  "availabilitySet": {
                                    "value": "[variables('availabilitySetName')]"
                                  },
                                  "index": {
                                    "value": "[range(0, parameters('vm').count)[copyIndex()]]"
                                  },
                                  "elasticTags": {
                                    "value": "[parameters('elasticTags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1272.37030",
                                      "templateHash": "9194726631229920325"
                                    }
                                  },
                                  "parameters": {
                                    "vm": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "vm configuration"
                                      }
                                    },
                                    "index": {
                                      "type": "int",
                                      "metadata": {
                                        "description": "the outer loop index"
                                      }
                                    },
                                    "availabilitySet": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the availability set"
                                      }
                                    },
                                    "dataDisks": {
                                      "type": "object",
                                      "defaultValue": {
                                        "disks": []
                                      },
                                      "metadata": {
                                        "description": "additional data disks to attach"
                                      }
                                    },
                                    "elasticTags": {
                                      "type": "object",
                                      "defaultValue": {
                                        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                                      },
                                      "metadata": {
                                        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "vmName": "[format('{0}{1}', parameters('vm').namespace, parameters('index'))]",
                                    "password_osProfile": {
                                      "computername": "[variables('vmName')]",
                                      "adminUsername": "[parameters('vm').shared.credentials.adminUsername]",
                                      "adminPassword": "[parameters('vm').shared.credentials.password]"
                                    },
                                    "sshPublicKey_osProfile": {
                                      "computername": "[variables('vmName')]",
                                      "adminUsername": "[parameters('vm').shared.credentials.adminUsername]",
                                      "linuxConfiguration": {
                                        "disablePasswordAuthentication": "true",
                                        "ssh": {
                                          "publicKeys": [
                                            {
                                              "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('vm').shared.credentials.adminUsername)]",
                                              "keyData": "[parameters('vm').shared.credentials.sshPublicKey]"
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "publicIpName": "[format('{0}-ip', variables('vmName'))]",
                                    "nsgIpConfigs": [
                                      {},
                                      {
                                        "networkSecurityGroup": {
                                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vm').nsg)]"
                                        }
                                      },
                                      {
                                        "networkSecurityGroup": {
                                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vm').nsg)]"
                                        },
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "primary": true,
                                              "privateIPAllocationMethod": "Dynamic",
                                              "subnet": {
                                                "id": "[parameters('vm').shared.subnetId]"
                                              },
                                              "loadBalancerBackendAddressPools": "[parameters('vm').backendPools]",
                                              "publicIPAddress": {
                                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ],
                                    "nsgIpConfig": "[variables('nsgIpConfigs')[if(empty(parameters('vm').nsg), 0, if(parameters('vm').standardInternalLoadBalancer, 2, 1))]]",
                                    "nicProperties": {
                                      "primary": true,
                                      "enableAcceleratedNetworking": "[equals(parameters('vm').acceleratedNetworking, 'Yes')]",
                                      "ipConfigurations": [
                                        {
                                          "name": "ipconfig1",
                                          "properties": {
                                            "privateIPAllocationMethod": "Dynamic",
                                            "subnet": {
                                              "id": "[parameters('vm').shared.subnetId]"
                                            },
                                            "loadBalancerBackendAddressPools": "[parameters('vm').backendPools]"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[and(not(empty(parameters('vm').nsg)), parameters('vm').standardInternalLoadBalancer)]",
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2019-04-01",
                                      "name": "[variables('publicIpName')]",
                                      "location": "[parameters('vm').shared.location]",
                                      "sku": {
                                        "name": "Standard"
                                      },
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": {
                                        "publicIPAllocationMethod": "Static",
                                        "dnsSettings": {
                                          "domainNameLabel": "[format('{0}{1}', variables('vmName'), uniqueString(resourceGroup().id, deployment().name))]"
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2019-04-01",
                                      "name": "[format('{0}-nic', variables('vmName'))]",
                                      "location": "[parameters('vm').shared.location]",
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": "[union(variables('nicProperties'), variables('nsgIpConfig'))]",
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2019-03-01",
                                      "name": "[variables('vmName')]",
                                      "location": "[parameters('vm').shared.location]",
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": {
                                        "availabilitySet": {
                                          "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySet'))]"
                                        },
                                        "hardwareProfile": {
                                          "vmSize": "[parameters('vm').size]"
                                        },
                                        "osProfile": "[if(equals(parameters('vm').shared.credentials.authenticationType, 'password'), variables('password_osProfile'), variables('sshPublicKey_osProfile'))]",
                                        "storageProfile": {
                                          "imageReference": "[parameters('vm').imageReference]",
                                          "osDisk": {
                                            "name": "[format('{0}-osdisk', variables('vmName'))]",
                                            "managedDisk": {
                                              "storageAccountType": "[parameters('vm').storageAccountType]"
                                            },
                                            "caching": "ReadWrite",
                                            "createOption": "FromImage"
                                          },
                                          "dataDisks": "[parameters('dataDisks').disks]"
                                        },
                                        "networkProfile": {
                                          "networkInterfaces": [
                                            {
                                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('vmName')))]"
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('vmName')))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2019-03-01",
                                      "name": "[format('{0}/script', variables('vmName'))]",
                                      "location": "[parameters('vm').shared.location]",
                                      "properties": "[parameters('vm').installScript]",
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "data-nodes",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vm": {
                            "value": {
                              "shared": "[parameters('commonVmSettings')]",
                              "namespace": "[format('{0}data-', parameters('commonVmSettings').namespacePrefix)]",
                              "installScript": "[parameters('osSettings').extensionSettings.data]",
                              "size": "[parameters('topologySettings').vmSizeDataNodes]",
                              "storageAccountType": "[parameters('topologySettings').vmDataNodeStorageAccountType]",
                              "count": "[parameters('topologySettings').vmDataNodeCount]",
                              "backendPools": "[parameters('topologySettings').dataLoadBalancerBackEndPools]",
                              "imageReference": "[parameters('osSettings').imageReference]",
                              "platformFaultDomainCount": "[variables('platformFaultDomainCount')]",
                              "acceleratedNetworking": "[if(equals(parameters('topologySettings').vmDataNodeAcceleratedNetworking, 'Default'), if(contains(variables('vmAcceleratedNetworking'), parameters('topologySettings').vmSizeDataNodes), 'Yes', 'No'), parameters('topologySettings').vmDataNodeAcceleratedNetworking)]",
                              "nsg": "[if(and(variables('standardInternalOrExternalLoadBalancer'), equals(parameters('topologySettings').vmClientNodeCount, 0)), variables('networkSecurityGroupName'), '')]",
                              "standardInternalLoadBalancer": "[variables('standardInternalLoadBalancer')]"
                            }
                          },
                          "storageSettings": {
                            "value": "[parameters('topologySettings').dataNodeStorageSettings]"
                          },
                          "elasticTags": {
                            "value": "[parameters('elasticTags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1272.37030",
                              "templateHash": "2896084932501386182"
                            }
                          },
                          "parameters": {
                            "vm": {
                              "type": "object",
                              "metadata": {
                                "description": "vm configuration"
                              }
                            },
                            "storageSettings": {
                              "type": "object",
                              "metadata": {
                                "description": "Storage Account Settings"
                              }
                            },
                            "elasticTags": {
                              "type": "object",
                              "defaultValue": {
                                "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                              },
                              "metadata": {
                                "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                              }
                            }
                          },
                          "variables": {
                            "namespace": "[parameters('vm').namespace]",
                            "avSetCount": "[add(div(sub(parameters('vm').count, 1), 100), 1)]",
                            "diskCount": "[if(greater(parameters('storageSettings').dataDisks, 0), parameters('storageSettings').dataDisks, 1)]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "availabilitySets",
                                "count": "[length(range(0, variables('avSetCount')))]"
                              },
                              "type": "Microsoft.Compute/availabilitySets",
                              "apiVersion": "2019-03-01",
                              "name": "[format('{0}{1}-av-set', variables('namespace'), range(0, variables('avSetCount'))[copyIndex()])]",
                              "location": "[parameters('vm').shared.location]",
                              "tags": {
                                "provider": "[toUpper(parameters('elasticTags').provider)]"
                              },
                              "properties": {
                                "platformUpdateDomainCount": 20,
                                "platformFaultDomainCount": "[parameters('vm').platformFaultDomainCount]"
                              },
                              "sku": {
                                "name": "Aligned"
                              }
                            },
                            {
                              "condition": "[greater(variables('diskCount'), 0)]",
                              "copy": {
                                "name": "virtualMachinesWithDisks",
                                "count": "[length(range(0, parameters('vm').count))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}{1}-vm-creation', variables('namespace'), range(0, parameters('vm').count)[copyIndex()])]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "vm": {
                                    "value": "[parameters('vm')]"
                                  },
                                  "index": {
                                    "value": "[range(0, parameters('vm').count)[copyIndex()]]"
                                  },
                                  "availabilitySet": {
                                    "value": "[format('{0}{1}-av-set', variables('namespace'), mod(range(0, parameters('vm').count)[copyIndex()], variables('avSetCount')))]"
                                  },
                                  "dataDisks": {
                                    "value": {
                                      "copy": [
                                        {
                                          "name": "disks",
                                          "count": "[length(range(0, variables('diskCount')))]",
                                          "input": {
                                            "name": "[format('{0}{1}-datadisk{2}', variables('namespace'), range(0, parameters('vm').count)[copyIndex()], add(range(0, variables('diskCount'))[copyIndex('disks')], 1))]",
                                            "diskSizeGB": "[parameters('storageSettings').diskSize]",
                                            "lun": "[range(0, variables('diskCount'))[copyIndex('disks')]]",
                                            "managedDisk": {
                                              "storageAccountType": "[parameters('storageSettings').accountType]"
                                            },
                                            "caching": "None",
                                            "createOption": "Empty"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "elasticTags": {
                                    "value": "[parameters('elasticTags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1272.37030",
                                      "templateHash": "9194726631229920325"
                                    }
                                  },
                                  "parameters": {
                                    "vm": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "vm configuration"
                                      }
                                    },
                                    "index": {
                                      "type": "int",
                                      "metadata": {
                                        "description": "the outer loop index"
                                      }
                                    },
                                    "availabilitySet": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the availability set"
                                      }
                                    },
                                    "dataDisks": {
                                      "type": "object",
                                      "defaultValue": {
                                        "disks": []
                                      },
                                      "metadata": {
                                        "description": "additional data disks to attach"
                                      }
                                    },
                                    "elasticTags": {
                                      "type": "object",
                                      "defaultValue": {
                                        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                                      },
                                      "metadata": {
                                        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "vmName": "[format('{0}{1}', parameters('vm').namespace, parameters('index'))]",
                                    "password_osProfile": {
                                      "computername": "[variables('vmName')]",
                                      "adminUsername": "[parameters('vm').shared.credentials.adminUsername]",
                                      "adminPassword": "[parameters('vm').shared.credentials.password]"
                                    },
                                    "sshPublicKey_osProfile": {
                                      "computername": "[variables('vmName')]",
                                      "adminUsername": "[parameters('vm').shared.credentials.adminUsername]",
                                      "linuxConfiguration": {
                                        "disablePasswordAuthentication": "true",
                                        "ssh": {
                                          "publicKeys": [
                                            {
                                              "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('vm').shared.credentials.adminUsername)]",
                                              "keyData": "[parameters('vm').shared.credentials.sshPublicKey]"
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "publicIpName": "[format('{0}-ip', variables('vmName'))]",
                                    "nsgIpConfigs": [
                                      {},
                                      {
                                        "networkSecurityGroup": {
                                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vm').nsg)]"
                                        }
                                      },
                                      {
                                        "networkSecurityGroup": {
                                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vm').nsg)]"
                                        },
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "primary": true,
                                              "privateIPAllocationMethod": "Dynamic",
                                              "subnet": {
                                                "id": "[parameters('vm').shared.subnetId]"
                                              },
                                              "loadBalancerBackendAddressPools": "[parameters('vm').backendPools]",
                                              "publicIPAddress": {
                                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ],
                                    "nsgIpConfig": "[variables('nsgIpConfigs')[if(empty(parameters('vm').nsg), 0, if(parameters('vm').standardInternalLoadBalancer, 2, 1))]]",
                                    "nicProperties": {
                                      "primary": true,
                                      "enableAcceleratedNetworking": "[equals(parameters('vm').acceleratedNetworking, 'Yes')]",
                                      "ipConfigurations": [
                                        {
                                          "name": "ipconfig1",
                                          "properties": {
                                            "privateIPAllocationMethod": "Dynamic",
                                            "subnet": {
                                              "id": "[parameters('vm').shared.subnetId]"
                                            },
                                            "loadBalancerBackendAddressPools": "[parameters('vm').backendPools]"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[and(not(empty(parameters('vm').nsg)), parameters('vm').standardInternalLoadBalancer)]",
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2019-04-01",
                                      "name": "[variables('publicIpName')]",
                                      "location": "[parameters('vm').shared.location]",
                                      "sku": {
                                        "name": "Standard"
                                      },
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": {
                                        "publicIPAllocationMethod": "Static",
                                        "dnsSettings": {
                                          "domainNameLabel": "[format('{0}{1}', variables('vmName'), uniqueString(resourceGroup().id, deployment().name))]"
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2019-04-01",
                                      "name": "[format('{0}-nic', variables('vmName'))]",
                                      "location": "[parameters('vm').shared.location]",
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": "[union(variables('nicProperties'), variables('nsgIpConfig'))]",
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2019-03-01",
                                      "name": "[variables('vmName')]",
                                      "location": "[parameters('vm').shared.location]",
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": {
                                        "availabilitySet": {
                                          "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySet'))]"
                                        },
                                        "hardwareProfile": {
                                          "vmSize": "[parameters('vm').size]"
                                        },
                                        "osProfile": "[if(equals(parameters('vm').shared.credentials.authenticationType, 'password'), variables('password_osProfile'), variables('sshPublicKey_osProfile'))]",
                                        "storageProfile": {
                                          "imageReference": "[parameters('vm').imageReference]",
                                          "osDisk": {
                                            "name": "[format('{0}-osdisk', variables('vmName'))]",
                                            "managedDisk": {
                                              "storageAccountType": "[parameters('vm').storageAccountType]"
                                            },
                                            "caching": "ReadWrite",
                                            "createOption": "FromImage"
                                          },
                                          "dataDisks": "[parameters('dataDisks').disks]"
                                        },
                                        "networkProfile": {
                                          "networkInterfaces": [
                                            {
                                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('vmName')))]"
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('vmName')))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2019-03-01",
                                      "name": "[format('{0}/script', variables('vmName'))]",
                                      "location": "[parameters('vm').shared.location]",
                                      "properties": "[parameters('vm').installScript]",
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "availabilitySets"
                              ]
                            },
                            {
                              "condition": "[equals(variables('diskCount'), 0)]",
                              "copy": {
                                "name": "virtualMachinesWithoutDisks",
                                "count": "[length(range(0, parameters('vm').count))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}{1}-vm-nodisks-creation', variables('namespace'), range(0, parameters('vm').count)[copyIndex()])]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "vm": {
                                    "value": "[parameters('vm')]"
                                  },
                                  "index": {
                                    "value": "[range(0, parameters('vm').count)[copyIndex()]]"
                                  },
                                  "availabilitySet": {
                                    "value": "[format('{0}{1}-av-set', variables('namespace'), mod(range(0, parameters('vm').count)[copyIndex()], variables('avSetCount')))]"
                                  },
                                  "elasticTags": {
                                    "value": "[parameters('elasticTags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1272.37030",
                                      "templateHash": "9194726631229920325"
                                    }
                                  },
                                  "parameters": {
                                    "vm": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "vm configuration"
                                      }
                                    },
                                    "index": {
                                      "type": "int",
                                      "metadata": {
                                        "description": "the outer loop index"
                                      }
                                    },
                                    "availabilitySet": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the availability set"
                                      }
                                    },
                                    "dataDisks": {
                                      "type": "object",
                                      "defaultValue": {
                                        "disks": []
                                      },
                                      "metadata": {
                                        "description": "additional data disks to attach"
                                      }
                                    },
                                    "elasticTags": {
                                      "type": "object",
                                      "defaultValue": {
                                        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                                      },
                                      "metadata": {
                                        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "vmName": "[format('{0}{1}', parameters('vm').namespace, parameters('index'))]",
                                    "password_osProfile": {
                                      "computername": "[variables('vmName')]",
                                      "adminUsername": "[parameters('vm').shared.credentials.adminUsername]",
                                      "adminPassword": "[parameters('vm').shared.credentials.password]"
                                    },
                                    "sshPublicKey_osProfile": {
                                      "computername": "[variables('vmName')]",
                                      "adminUsername": "[parameters('vm').shared.credentials.adminUsername]",
                                      "linuxConfiguration": {
                                        "disablePasswordAuthentication": "true",
                                        "ssh": {
                                          "publicKeys": [
                                            {
                                              "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('vm').shared.credentials.adminUsername)]",
                                              "keyData": "[parameters('vm').shared.credentials.sshPublicKey]"
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "publicIpName": "[format('{0}-ip', variables('vmName'))]",
                                    "nsgIpConfigs": [
                                      {},
                                      {
                                        "networkSecurityGroup": {
                                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vm').nsg)]"
                                        }
                                      },
                                      {
                                        "networkSecurityGroup": {
                                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vm').nsg)]"
                                        },
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "primary": true,
                                              "privateIPAllocationMethod": "Dynamic",
                                              "subnet": {
                                                "id": "[parameters('vm').shared.subnetId]"
                                              },
                                              "loadBalancerBackendAddressPools": "[parameters('vm').backendPools]",
                                              "publicIPAddress": {
                                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ],
                                    "nsgIpConfig": "[variables('nsgIpConfigs')[if(empty(parameters('vm').nsg), 0, if(parameters('vm').standardInternalLoadBalancer, 2, 1))]]",
                                    "nicProperties": {
                                      "primary": true,
                                      "enableAcceleratedNetworking": "[equals(parameters('vm').acceleratedNetworking, 'Yes')]",
                                      "ipConfigurations": [
                                        {
                                          "name": "ipconfig1",
                                          "properties": {
                                            "privateIPAllocationMethod": "Dynamic",
                                            "subnet": {
                                              "id": "[parameters('vm').shared.subnetId]"
                                            },
                                            "loadBalancerBackendAddressPools": "[parameters('vm').backendPools]"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[and(not(empty(parameters('vm').nsg)), parameters('vm').standardInternalLoadBalancer)]",
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2019-04-01",
                                      "name": "[variables('publicIpName')]",
                                      "location": "[parameters('vm').shared.location]",
                                      "sku": {
                                        "name": "Standard"
                                      },
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": {
                                        "publicIPAllocationMethod": "Static",
                                        "dnsSettings": {
                                          "domainNameLabel": "[format('{0}{1}', variables('vmName'), uniqueString(resourceGroup().id, deployment().name))]"
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2019-04-01",
                                      "name": "[format('{0}-nic', variables('vmName'))]",
                                      "location": "[parameters('vm').shared.location]",
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": "[union(variables('nicProperties'), variables('nsgIpConfig'))]",
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2019-03-01",
                                      "name": "[variables('vmName')]",
                                      "location": "[parameters('vm').shared.location]",
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": {
                                        "availabilitySet": {
                                          "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySet'))]"
                                        },
                                        "hardwareProfile": {
                                          "vmSize": "[parameters('vm').size]"
                                        },
                                        "osProfile": "[if(equals(parameters('vm').shared.credentials.authenticationType, 'password'), variables('password_osProfile'), variables('sshPublicKey_osProfile'))]",
                                        "storageProfile": {
                                          "imageReference": "[parameters('vm').imageReference]",
                                          "osDisk": {
                                            "name": "[format('{0}-osdisk', variables('vmName'))]",
                                            "managedDisk": {
                                              "storageAccountType": "[parameters('vm').storageAccountType]"
                                            },
                                            "caching": "ReadWrite",
                                            "createOption": "FromImage"
                                          },
                                          "dataDisks": "[parameters('dataDisks').disks]"
                                        },
                                        "networkProfile": {
                                          "networkInterfaces": [
                                            {
                                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('vmName')))]"
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('vmName')))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2019-03-01",
                                      "name": "[format('{0}/script', variables('vmName'))]",
                                      "location": "[parameters('vm').shared.location]",
                                      "properties": "[parameters('vm').installScript]",
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "availabilitySets"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "condition": "[equals(toLower(parameters('topologySettings').jumpbox), 'yes')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "jumpbox",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "credentials": {
                            "value": "[parameters('commonVmSettings').credentials]"
                          },
                          "location": {
                            "value": "[parameters('commonVmSettings').location]"
                          },
                          "vmName": {
                            "value": "[format('{0}jumpbox', parameters('commonVmSettings').namespacePrefix)]"
                          },
                          "networkSettings": {
                            "value": "[parameters('networkSettings')]"
                          },
                          "osSettings": {
                            "value": "[parameters('osSettings')]"
                          },
                          "elasticTags": {
                            "value": "[parameters('elasticTags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1272.37030",
                              "templateHash": "7272365375184994060"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location where resources will be provisioned"
                              }
                            },
                            "vmName": {
                              "type": "string",
                              "metadata": {
                                "description": "The unique namespace for jumpbox nodes"
                              }
                            },
                            "networkSettings": {
                              "type": "object",
                              "metadata": {
                                "description": "Network settings"
                              }
                            },
                            "credentials": {
                              "type": "secureObject",
                              "metadata": {
                                "description": "Credential information block"
                              }
                            },
                            "osSettings": {
                              "type": "object",
                              "metadata": {
                                "description": "Elasticsearch deployment platform settings"
                              }
                            },
                            "elasticTags": {
                              "type": "object",
                              "defaultValue": {
                                "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                              },
                              "metadata": {
                                "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                              }
                            }
                          },
                          "variables": {
                            "vmSize": "Standard_A0",
                            "subnetId": "[resourceId(parameters('networkSettings').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('networkSettings').name, parameters('networkSettings').subnet.name)]",
                            "publicIpName": "[format('{0}-ip', parameters('vmName'))]",
                            "securityGroupName": "[format('{0}-nsg', parameters('vmName'))]",
                            "vmNetworkInterfaceName": "[format('{0}-nic', parameters('vmName'))]",
                            "password_osProfile": {
                              "computername": "[parameters('vmName')]",
                              "adminUsername": "[parameters('credentials').adminUsername]",
                              "adminPassword": "[parameters('credentials').password]"
                            },
                            "sshPublicKey_osProfile": {
                              "computername": "[parameters('vmName')]",
                              "adminUsername": "[parameters('credentials').adminUsername]",
                              "linuxConfiguration": {
                                "disablePasswordAuthentication": "true",
                                "ssh": {
                                  "publicKeys": [
                                    {
                                      "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('credentials').adminUsername)]",
                                      "keyData": "[parameters('credentials').sshPublicKey]"
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2019-04-01",
                              "name": "[variables('securityGroupName')]",
                              "location": "[parameters('location')]",
                              "tags": {
                                "provider": "[toUpper(parameters('elasticTags').provider)]"
                              },
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "SSH",
                                    "properties": {
                                      "description": "Allows SSH traffic",
                                      "protocol": "Tcp",
                                      "sourcePortRange": "*",
                                      "destinationPortRange": "[parameters('osSettings').managementPort]",
                                      "sourceAddressPrefix": "*",
                                      "destinationAddressPrefix": "*",
                                      "access": "Allow",
                                      "priority": 100,
                                      "direction": "Inbound"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2019-04-01",
                              "name": "[variables('publicIpName')]",
                              "location": "[parameters('location')]",
                              "tags": {
                                "provider": "[toUpper(parameters('elasticTags').provider)]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "Dynamic",
                                "dnsSettings": {
                                  "domainNameLabel": "[format('jump-{0}', uniqueString(resourceGroup().id, deployment().name))]"
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2019-04-01",
                              "name": "[variables('vmNetworkInterfaceName')]",
                              "location": "[parameters('location')]",
                              "tags": {
                                "provider": "[toUpper(parameters('elasticTags').provider)]"
                              },
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateIPAllocationMethod": "Dynamic",
                                      "publicIPAddress": {
                                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                                      },
                                      "subnet": {
                                        "id": "[variables('subnetId')]"
                                      }
                                    }
                                  }
                                ],
                                "networkSecurityGroup": {
                                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('securityGroupName'))]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]",
                                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('securityGroupName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2019-03-01",
                              "name": "[parameters('vmName')]",
                              "location": "[parameters('location')]",
                              "tags": {
                                "provider": "[toUpper(parameters('elasticTags').provider)]"
                              },
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "[variables('vmSize')]"
                                },
                                "osProfile": "[if(equals(parameters('credentials').authenticationType, 'password'), variables('password_osProfile'), variables('sshPublicKey_osProfile'))]",
                                "storageProfile": {
                                  "imageReference": "[parameters('osSettings').imageReference]",
                                  "osDisk": {
                                    "name": "[format('{0}-osdisk', parameters('vmName'))]",
                                    "managedDisk": {
                                      "storageAccountType": "Standard_LRS"
                                    },
                                    "caching": "ReadWrite",
                                    "createOption": "FromImage"
                                  }
                                },
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmNetworkInterfaceName'))]"
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', variables('vmNetworkInterfaceName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "fqdn": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))).dnsSettings.fqdn]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[equals(parameters('topologySettings').kibana, 'Yes')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "kibana",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "credentials": {
                            "value": "[parameters('commonVmSettings').credentials]"
                          },
                          "location": {
                            "value": "[parameters('commonVmSettings').location]"
                          },
                          "vmName": {
                            "value": "[format('{0}kibana', parameters('commonVmSettings').namespacePrefix)]"
                          },
                          "networkSettings": {
                            "value": "[parameters('networkSettings')]"
                          },
                          "osSettings": {
                            "value": "[parameters('osSettings')]"
                          },
                          "vmSize": {
                            "value": "[parameters('topologySettings').vmSizeKibana]"
                          },
                          "acceleratedNetworking": {
                            "value": "[if(equals(parameters('topologySettings').vmKibanaAcceleratedNetworking, 'Default'), if(contains(variables('vmAcceleratedNetworking'), parameters('topologySettings').vmSizeKibana), 'Yes', 'No'), parameters('topologySettings').vmKibanaAcceleratedNetworking)]"
                          },
                          "elasticTags": {
                            "value": "[parameters('elasticTags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1272.37030",
                              "templateHash": "18390787985649623517"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location where resources will be provisioned"
                              }
                            },
                            "vmName": {
                              "type": "string",
                              "metadata": {
                                "description": "The unique namespace for the Kibana VM"
                              }
                            },
                            "networkSettings": {
                              "type": "object",
                              "metadata": {
                                "description": "Network settings"
                              }
                            },
                            "credentials": {
                              "type": "secureObject",
                              "metadata": {
                                "description": "Credentials information block"
                              }
                            },
                            "osSettings": {
                              "type": "object",
                              "metadata": {
                                "description": "Platform and OS settings"
                              }
                            },
                            "vmSize": {
                              "type": "string",
                              "defaultValue": "Standard_A1",
                              "metadata": {
                                "description": "Size of the Kibana VM"
                              }
                            },
                            "acceleratedNetworking": {
                              "type": "string",
                              "defaultValue": "No",
                              "allowedValues": [
                                "Yes",
                                "No"
                              ],
                              "metadata": {
                                "description": "Whether to enable accelerated networking for Kibana, which enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance. Valid only for specific VM SKUs"
                              }
                            },
                            "elasticTags": {
                              "type": "object",
                              "defaultValue": {
                                "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                              },
                              "metadata": {
                                "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                              }
                            }
                          },
                          "variables": {
                            "subnetId": "[resourceId(parameters('networkSettings').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('networkSettings').name, parameters('networkSettings').subnet.name)]",
                            "publicIpName": "[format('{0}-ip', parameters('vmName'))]",
                            "securityGroupName": "[format('{0}-nsg', parameters('vmName'))]",
                            "networkInterfaceName": "[format('{0}-nic', parameters('vmName'))]",
                            "password_osProfile": {
                              "computername": "[parameters('vmName')]",
                              "adminUsername": "[parameters('credentials').adminUsername]",
                              "adminPassword": "[parameters('credentials').password]"
                            },
                            "sshPublicKey_osProfile": {
                              "computername": "[parameters('vmName')]",
                              "adminUsername": "[parameters('credentials').adminUsername]",
                              "linuxConfiguration": {
                                "disablePasswordAuthentication": "true",
                                "ssh": {
                                  "publicKeys": [
                                    {
                                      "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('credentials').adminUsername)]",
                                      "keyData": "[parameters('credentials').sshPublicKey]"
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2019-04-01",
                              "name": "[variables('securityGroupName')]",
                              "location": "[parameters('location')]",
                              "tags": {
                                "provider": "[toUpper(parameters('elasticTags').provider)]"
                              },
                              "properties": {
                                "securityRules": [
                                  {
                                    "name": "SSH",
                                    "properties": {
                                      "description": "Allows inbound SSH traffic from anyone",
                                      "protocol": "Tcp",
                                      "sourcePortRange": "*",
                                      "destinationPortRange": "[parameters('osSettings').managementPort]",
                                      "sourceAddressPrefix": "*",
                                      "destinationAddressPrefix": "*",
                                      "access": "Allow",
                                      "priority": 100,
                                      "direction": "Inbound"
                                    }
                                  },
                                  {
                                    "name": "Kibana",
                                    "properties": {
                                      "description": "Allows inbound Kibana traffic from anyone",
                                      "protocol": "Tcp",
                                      "sourcePortRange": "*",
                                      "destinationPortRange": "5601",
                                      "sourceAddressPrefix": "*",
                                      "destinationAddressPrefix": "*",
                                      "access": "Allow",
                                      "priority": 200,
                                      "direction": "Inbound"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2019-04-01",
                              "name": "[variables('networkInterfaceName')]",
                              "location": "[parameters('location')]",
                              "tags": {
                                "provider": "[toUpper(parameters('elasticTags').provider)]"
                              },
                              "properties": {
                                "primary": true,
                                "enableAcceleratedNetworking": "[equals(parameters('acceleratedNetworking'), 'Yes')]",
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateIPAllocationMethod": "Dynamic",
                                      "publicIPAddress": {
                                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                                      },
                                      "subnet": {
                                        "id": "[variables('subnetId')]"
                                      }
                                    }
                                  }
                                ],
                                "networkSecurityGroup": {
                                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('securityGroupName'))]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('securityGroupName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2019-03-01",
                              "name": "[parameters('vmName')]",
                              "location": "[parameters('location')]",
                              "tags": {
                                "provider": "[toUpper(parameters('elasticTags').provider)]"
                              },
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "[parameters('vmSize')]"
                                },
                                "osProfile": "[if(equals(parameters('credentials').authenticationType, 'password'), variables('password_osProfile'), variables('sshPublicKey_osProfile'))]",
                                "storageProfile": {
                                  "imageReference": "[parameters('osSettings').imageReference]",
                                  "osDisk": {
                                    "name": "[format('{0}-osdisk', parameters('vmName'))]",
                                    "managedDisk": {
                                      "storageAccountType": "Standard_LRS"
                                    },
                                    "caching": "ReadWrite",
                                    "createOption": "FromImage"
                                  }
                                },
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2019-03-01",
                              "name": "[format('{0}/script', parameters('vmName'))]",
                              "location": "[parameters('location')]",
                              "properties": "[parameters('osSettings').extensionSettings.kibana]",
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "condition": "[equals(parameters('topologySettings').logstash, 'Yes')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "logstash",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vm": {
                            "value": {
                              "shared": "[parameters('commonVmSettings')]",
                              "namespace": "[format('{0}logstash-', parameters('commonVmSettings').namespacePrefix)]",
                              "installScript": "[parameters('osSettings').extensionSettings.logstash]",
                              "size": "[parameters('topologySettings').vmSizeLogstash]",
                              "storageAccountType": "Standard_LRS",
                              "count": "[parameters('topologySettings').vmLogstashCount]",
                              "backendPools": [],
                              "imageReference": "[parameters('osSettings').imageReference]",
                              "platformFaultDomainCount": "[variables('platformFaultDomainCount')]",
                              "acceleratedNetworking": "[if(equals(parameters('topologySettings').vmLogstashAcceleratedNetworking, 'Default'), if(contains(variables('vmAcceleratedNetworking'), parameters('topologySettings').vmSizeLogstash), 'Yes', 'No'), parameters('topologySettings').vmLogstashAcceleratedNetworking)]",
                              "nsg": "",
                              "standardInternalLoadBalancer": false
                            }
                          },
                          "elasticTags": {
                            "value": "[parameters('elasticTags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1272.37030",
                              "templateHash": "957160880857125983"
                            }
                          },
                          "parameters": {
                            "vm": {
                              "type": "object",
                              "metadata": {
                                "description": "vm configuration"
                              }
                            },
                            "elasticTags": {
                              "type": "object",
                              "defaultValue": {
                                "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                              },
                              "metadata": {
                                "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                              }
                            }
                          },
                          "variables": {
                            "namespace": "[parameters('vm').namespace]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/availabilitySets",
                              "apiVersion": "2019-03-01",
                              "name": "[format('{0}av-set', variables('namespace'))]",
                              "location": "[parameters('vm').shared.location]",
                              "tags": {
                                "provider": "[toUpper(parameters('elasticTags').provider)]"
                              },
                              "properties": {
                                "platformUpdateDomainCount": 20,
                                "platformFaultDomainCount": "[parameters('vm').platformFaultDomainCount]"
                              },
                              "sku": {
                                "name": "Aligned"
                              }
                            },
                            {
                              "copy": {
                                "name": "virtualMachine",
                                "count": "[length(range(0, parameters('vm').count))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}{1}-vm-creation', variables('namespace'), range(0, parameters('vm').count)[copyIndex()])]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "vm": {
                                    "value": "[parameters('vm')]"
                                  },
                                  "availabilitySet": {
                                    "value": "[format('{0}av-set', variables('namespace'))]"
                                  },
                                  "index": {
                                    "value": "[range(0, parameters('vm').count)[copyIndex()]]"
                                  },
                                  "elasticTags": {
                                    "value": "[parameters('elasticTags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1272.37030",
                                      "templateHash": "9194726631229920325"
                                    }
                                  },
                                  "parameters": {
                                    "vm": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "vm configuration"
                                      }
                                    },
                                    "index": {
                                      "type": "int",
                                      "metadata": {
                                        "description": "the outer loop index"
                                      }
                                    },
                                    "availabilitySet": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the availability set"
                                      }
                                    },
                                    "dataDisks": {
                                      "type": "object",
                                      "defaultValue": {
                                        "disks": []
                                      },
                                      "metadata": {
                                        "description": "additional data disks to attach"
                                      }
                                    },
                                    "elasticTags": {
                                      "type": "object",
                                      "defaultValue": {
                                        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
                                      },
                                      "metadata": {
                                        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "vmName": "[format('{0}{1}', parameters('vm').namespace, parameters('index'))]",
                                    "password_osProfile": {
                                      "computername": "[variables('vmName')]",
                                      "adminUsername": "[parameters('vm').shared.credentials.adminUsername]",
                                      "adminPassword": "[parameters('vm').shared.credentials.password]"
                                    },
                                    "sshPublicKey_osProfile": {
                                      "computername": "[variables('vmName')]",
                                      "adminUsername": "[parameters('vm').shared.credentials.adminUsername]",
                                      "linuxConfiguration": {
                                        "disablePasswordAuthentication": "true",
                                        "ssh": {
                                          "publicKeys": [
                                            {
                                              "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('vm').shared.credentials.adminUsername)]",
                                              "keyData": "[parameters('vm').shared.credentials.sshPublicKey]"
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "publicIpName": "[format('{0}-ip', variables('vmName'))]",
                                    "nsgIpConfigs": [
                                      {},
                                      {
                                        "networkSecurityGroup": {
                                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vm').nsg)]"
                                        }
                                      },
                                      {
                                        "networkSecurityGroup": {
                                          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('vm').nsg)]"
                                        },
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "primary": true,
                                              "privateIPAllocationMethod": "Dynamic",
                                              "subnet": {
                                                "id": "[parameters('vm').shared.subnetId]"
                                              },
                                              "loadBalancerBackendAddressPools": "[parameters('vm').backendPools]",
                                              "publicIPAddress": {
                                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ],
                                    "nsgIpConfig": "[variables('nsgIpConfigs')[if(empty(parameters('vm').nsg), 0, if(parameters('vm').standardInternalLoadBalancer, 2, 1))]]",
                                    "nicProperties": {
                                      "primary": true,
                                      "enableAcceleratedNetworking": "[equals(parameters('vm').acceleratedNetworking, 'Yes')]",
                                      "ipConfigurations": [
                                        {
                                          "name": "ipconfig1",
                                          "properties": {
                                            "privateIPAllocationMethod": "Dynamic",
                                            "subnet": {
                                              "id": "[parameters('vm').shared.subnetId]"
                                            },
                                            "loadBalancerBackendAddressPools": "[parameters('vm').backendPools]"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[and(not(empty(parameters('vm').nsg)), parameters('vm').standardInternalLoadBalancer)]",
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2019-04-01",
                                      "name": "[variables('publicIpName')]",
                                      "location": "[parameters('vm').shared.location]",
                                      "sku": {
                                        "name": "Standard"
                                      },
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": {
                                        "publicIPAllocationMethod": "Static",
                                        "dnsSettings": {
                                          "domainNameLabel": "[format('{0}{1}', variables('vmName'), uniqueString(resourceGroup().id, deployment().name))]"
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2019-04-01",
                                      "name": "[format('{0}-nic', variables('vmName'))]",
                                      "location": "[parameters('vm').shared.location]",
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": "[union(variables('nicProperties'), variables('nsgIpConfig'))]",
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2019-03-01",
                                      "name": "[variables('vmName')]",
                                      "location": "[parameters('vm').shared.location]",
                                      "tags": {
                                        "provider": "[toUpper(parameters('elasticTags').provider)]"
                                      },
                                      "properties": {
                                        "availabilitySet": {
                                          "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySet'))]"
                                        },
                                        "hardwareProfile": {
                                          "vmSize": "[parameters('vm').size]"
                                        },
                                        "osProfile": "[if(equals(parameters('vm').shared.credentials.authenticationType, 'password'), variables('password_osProfile'), variables('sshPublicKey_osProfile'))]",
                                        "storageProfile": {
                                          "imageReference": "[parameters('vm').imageReference]",
                                          "osDisk": {
                                            "name": "[format('{0}-osdisk', variables('vmName'))]",
                                            "managedDisk": {
                                              "storageAccountType": "[parameters('vm').storageAccountType]"
                                            },
                                            "caching": "ReadWrite",
                                            "createOption": "FromImage"
                                          },
                                          "dataDisks": "[parameters('dataDisks').disks]"
                                        },
                                        "networkProfile": {
                                          "networkInterfaces": [
                                            {
                                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('vmName')))]"
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('vmName')))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2019-03-01",
                                      "name": "[format('{0}/script', variables('vmName'))]",
                                      "location": "[parameters('vm').shared.location]",
                                      "properties": "[parameters('vm').installScript]",
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/availabilitySets', format('{0}av-set', variables('namespace')))]"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "jumpboxFqdn": {
                      "type": "string",
                      "value": "[if(equals(parameters('topologySettings').jumpbox, 'yes'), reference(resourceId('Microsoft.Resources/deployments', 'jumpbox')).outputs.fqdn.value, '')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "jumpboxFqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'elasticsearch-nodes')).outputs.jumpboxFqdn.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'kibana-ip')]",
        "[resourceId('Microsoft.Resources/deployments', 'load-balancer')]",
        "[resourceId('Microsoft.Resources/deployments', 'shared')]"
      ]
    }
  ],
  "outputs": {
    "loadbalancer": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'load-balancer')).outputs.fqdn.value]"
    },
    "kibana": {
      "type": "string",
      "value": "[if(equals(parameters('kibana'), 'Yes'), reference(resourceId('Microsoft.Resources/deployments', 'kibana-ip')).outputs.fqdn.value, '')]"
    },
    "jumpboxssh": {
      "type": "string",
      "value": "[format('{0}@{1}', parameters('adminUsername'), reference(resourceId('Microsoft.Resources/deployments', 'ubuntu-settings')).outputs.jumpboxFqdn.value)]"
    }
  }
}