{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1272.37030",
      "templateHash": "1660656734892596309"
    }
  },
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located including a trailing '/'"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      }
    },
    "esSettings": {
      "type": "object",
      "metadata": {
        "description": "The Elasticsearch settings"
      }
    },
    "topologySettings": {
      "type": "object",
      "metadata": {
        "description": "Aggregate for topology variable"
      }
    },
    "networkSettings": {
      "type": "object",
      "metadata": {
        "description": "Network settings"
      }
    },
    "azureCloudStorageAccount": {
      "type": "secureObject",
      "metadata": {
        "description": "The storage settings for the Azure Cloud plugin"
      }
    },
    "kibanaIp": {
      "type": "string",
      "metadata": {
        "description": "The public IP address for Kibana"
      }
    },
    "sharedStorageAccount": {
      "type": "secureObject",
      "metadata": {
        "description": "The shared storage settings"
      }
    }
  },
  "variables": {
    "quote": "'",
    "doublequote": "\"",
    "backslash": "\\",
    "escapedQuote": "[format('{0}{1}{2}{3}{4}', variables('quote'), variables('doublequote'), variables('quote'), variables('doublequote'), variables('quote'))]",
    "namespacePrefix": "[parameters('topologySettings').vmHostNamePrefix]",
    "kibanaDomainName": "[if(not(empty(parameters('esSettings').samlMetadataUri)), if(not(empty(parameters('esSettings').samlServiceProviderUri)), parameters('esSettings').samlServiceProviderUri, parameters('kibanaIp')), '')]",
    "loadBalancerIp": "[format('{0}://{1}:9200', if(equals(parameters('networkSettings').https, 'Yes'), 'https', 'http'), parameters('topologySettings').vNetLoadBalancerIp)]",
    "dataNodeShortOpts": {
      "No": "z",
      "Yes": ""
    },
    "dataNodeShortOpt": "[variables('dataNodeShortOpts')[parameters('topologySettings').dataNodesAreMasterEligible]]",
    "dedicatedMasterNodesShortOpts": {
      "No": "d",
      "Yes": ""
    },
    "dedicatedMasterNodesShortOpt": "[variables('dedicatedMasterNodesShortOpts')[parameters('topologySettings').dataNodesAreMasterEligible]]",
    "installAzureCloudPluginShortOpts": {
      "No": "",
      "Yes": "j"
    },
    "installAzureCloudPluginShortOpt": "[variables('installAzureCloudPluginShortOpts')[parameters('azureCloudStorageAccount').install]]",
    "azureCloudStorageName": "[if(equals(parameters('azureCloudStorageAccount').install, 'Yes'), if(empty(parameters('azureCloudStorageAccount').name), parameters('sharedStorageAccount').name, parameters('azureCloudStorageAccount').name), '')]",
    "azureCloudStorageKey": "[if(equals(parameters('azureCloudStorageAccount').install, 'Yes'), if(empty(parameters('azureCloudStorageAccount').key), parameters('sharedStorageAccount').key, parameters('azureCloudStorageAccount').key), '')]",
    "azureCloudStorageSuffix": "[if(equals(parameters('azureCloudStorageAccount').install, 'Yes'), if(empty(parameters('azureCloudStorageAccount').name), parameters('sharedStorageAccount').suffix, parameters('azureCloudStorageAccount').suffix), '')]",
    "installPluginsShortOpts": {
      "No": "",
      "Yes": "l"
    },
    "installPluginsShortOpt": "[variables('installPluginsShortOpts')[parameters('esSettings').installPlugins]]",
    "commonShortOpts": "[format('{0}{1}{2}n ', variables('dedicatedMasterNodesShortOpt'), variables('installPluginsShortOpt'), variables('installAzureCloudPluginShortOpt'))]",
    "commonInstallParams": "[format('{0}{1}{2} -v {3}{4}{5} -m {6} -A {7}{8}{9} -R {10}{11}{12} -K {13}{14}{15} -S {16}{17}{18} -F {19}{20}{21} -M {22}{23}{24} -B {25}{26}{27} -Z {28} -p {29}{30}{31} -a {32}{33}{34} -k {35}{36}{37} -E {38}{39}{40} -L {41}{42}{43} -C {44}{45}{46} -D {47}{48}{49} -H {50}{51}{52} -G {53}{54}{55} -V {56}{57}{58} -J {59}{60}{61} -T {62}{63}{64} -W {65}{66}{67} -N {68}{69}{70} -O {71}{72}{73} -P {74}{75}{76}', variables('quote'), parameters('esSettings').clusterName, variables('quote'), variables('quote'), parameters('esSettings').version, variables('quote'), parameters('esSettings').heapSize, variables('quote'), replace(parameters('esSettings').securityAdminPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').securityRemoteMonitoringPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').securityKibanaPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').securityLogstashPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').securityBeatsPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').securityApmPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').securityBootstrapPwd, variables('quote'), variables('escapedQuote')), variables('quote'), parameters('topologySettings').vmDataNodeCount, variables('quote'), variables('namespacePrefix'), variables('quote'), variables('quote'), variables('azureCloudStorageName'), variables('quote'), variables('quote'), variables('azureCloudStorageKey'), variables('quote'), variables('quote'), variables('azureCloudStorageSuffix'), variables('quote'), variables('quote'), parameters('esSettings').installAdditionalPlugins, variables('quote'), variables('quote'), replace(replace(parameters('esSettings').yamlConfiguration, variables('quote'), variables('escapedQuote')), format('{0}{1}', variables('backslash'), variables('doublequote')), variables('doublequote')), variables('quote'), variables('quote'), parameters('topologySettings').vNetLoadBalancerIp, variables('quote'), variables('quote'), parameters('esSettings').httpCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').httpCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('esSettings').httpCaCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').httpCaCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('esSettings').transportCaCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').transportCaCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(parameters('esSettings').transportCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('esSettings').samlMetadataUri, variables('quote'), variables('quote'), variables('kibanaDomainName'), variables('quote'))]",
    "ubuntuScripts": [
      "[uri(parameters('_artifactsLocation'), format('scripts/elasticsearch-install.sh{0}', parameters('_artifactsLocationSasToken')))]",
      "[uri(parameters('_artifactsLocation'), format('scripts/kibana-install.sh{0}', parameters('_artifactsLocationSasToken')))]",
      "[uri(parameters('_artifactsLocation'), format('scripts/logstash-install.sh{0}', parameters('_artifactsLocationSasToken')))]",
      "[uri(parameters('_artifactsLocation'), format('scripts/vm-disk-utils-0.1.sh{0}', parameters('_artifactsLocationSasToken')))]",
      "[uri(parameters('_artifactsLocation'), format('scripts/java-install.sh{0}', parameters('_artifactsLocationSasToken')))]"
    ]
  },
  "resources": [],
  "outputs": {
    "ubuntuSettings": {
      "type": "object",
      "value": {
        "imageReference": {
          "publisher": "Canonical",
          "offer": "UbuntuServer",
          "sku": "16.04.0-LTS",
          "version": "latest"
        },
        "managementPort": 22,
        "extensionSettings": {
          "master": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": "[variables('ubuntuScripts')]"
            },
            "protectedSettings": {
              "commandToExecute": "[format('bash elasticsearch-install.sh -x{0}{1}', variables('commonShortOpts'), variables('commonInstallParams'))]"
            }
          },
          "client": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": "[variables('ubuntuScripts')]"
            },
            "protectedSettings": {
              "commandToExecute": "[format('bash elasticsearch-install.sh -y{0}{1}', variables('commonShortOpts'), variables('commonInstallParams'))]"
            }
          },
          "data": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": "[variables('ubuntuScripts')]"
            },
            "protectedSettings": {
              "commandToExecute": "[format('bash elasticsearch-install.sh -{0}{1}{2}', variables('dataNodeShortOpt'), variables('commonShortOpts'), variables('commonInstallParams'))]"
            }
          },
          "kibana": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": "[variables('ubuntuScripts')]"
            },
            "protectedSettings": {
              "commandToExecute": "[format('bash kibana-install.sh -{0}n {1}{2}{3} -v {4}{5}{6} -u {7}{8}{9} -S {10}{11}{12} -C {13}{14}{15} -K {16}{17}{18} -P {19}{20}{21} -Y {22}{23}{24} -H {25}{26}{27} -G {28}{29}{30} -V {31}{32}{33} -J {34}{35}{36} -U {37}{38}{39}', variables('installPluginsShortOpt'), variables('quote'), parameters('esSettings').clusterName, variables('quote'), variables('quote'), parameters('esSettings').version, variables('quote'), variables('quote'), variables('loadBalancerIp'), variables('quote'), variables('quote'), replace(parameters('esSettings').securityKibanaPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('topologySettings').kibanaCertBlob, variables('quote'), variables('quote'), parameters('topologySettings').kibanaKeyBlob, variables('quote'), variables('quote'), replace(parameters('topologySettings').kibanaKeyPassphrase, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(replace(parameters('topologySettings').kibanaYaml, variables('quote'), variables('escapedQuote')), format('{0}{1}', variables('backslash'), variables('doublequote')), variables('doublequote')), variables('quote'), variables('quote'), parameters('esSettings').httpCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').httpCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('esSettings').httpCaCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').httpCaCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), variables('kibanaDomainName'), variables('quote'))]"
            }
          },
          "logstash": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": "[variables('ubuntuScripts')]"
            },
            "protectedSettings": {
              "commandToExecute": "[format('bash logstash-install.sh -{0}v {1}{2}{3} -m {4} -u {5}{6}{7} -S {8}{9}{10} -L {11}{12}{13} -c {14}{15}{16} -K {17}{18}{19} -Y {20}{21}{22} -H {23}{24}{25} -G {26}{27}{28} -V {29}{30}{31} -J {32}{33}{34}', variables('installPluginsShortOpt'), variables('quote'), parameters('esSettings').version, variables('quote'), parameters('topologySettings').logstashHeapSize, variables('quote'), variables('loadBalancerIp'), variables('quote'), variables('quote'), replace(parameters('esSettings').securityLogstashPwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('topologySettings').logstashPlugins, variables('quote'), variables('quote'), parameters('topologySettings').logstashConf, variables('quote'), variables('quote'), replace(parameters('topologySettings').logstashKeystorePwd, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), replace(replace(parameters('topologySettings').logstashYaml, variables('quote'), variables('escapedQuote')), format('{0}{1}', variables('backslash'), variables('doublequote')), variables('doublequote')), variables('quote'), variables('quote'), parameters('esSettings').httpCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').httpCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), variables('quote'), parameters('esSettings').httpCaCertBlob, variables('quote'), variables('quote'), replace(parameters('esSettings').httpCaCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'))]"
            }
          }
        }
      }
    }
  }
}